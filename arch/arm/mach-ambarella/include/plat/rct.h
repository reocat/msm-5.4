/*
 * arch/arm/plat-ambarella/include/plat/rct.h
 *
 * Author: Anthony Ginger <hfjiang@ambarella.com>
 *
 * Copyright (C) 2004-2013, Ambarella, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

#ifndef __PLAT_AMBARELLA_RCT_H__
#define __PLAT_AMBARELLA_RCT_H__

#include <plat/chip.h>

/* ==========================================================================*/
#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || \
	(CHIP_REV == S5) || (CHIP_REV == S5L)
#define RCT_OFFSET			0x00170000
#else
#define RCT_OFFSET			0x00080000
#endif
#define RCT_BASE			(DBGBUS_BASE + RCT_OFFSET)
#define RCT_REG(x)			(RCT_BASE + (x))

#if (CHIP_REV == CV2FS)
#define RCT_INVALID_OFFSET		0x10
#else
#define RCT_INVALID_OFFSET		0x14
#endif
#define RCT_INVALID_REG			RCT_REG(RCT_INVALID_OFFSET)

/* ==========================================================================*/
#define PLL_LOCK_OFFSET			0x2C
#define SOFT_OR_DLL_RESET_OFFSET	0x68

#define PLL_LOCK_REG			RCT_REG(PLL_LOCK_OFFSET)
#define SOFT_OR_DLL_RESET_REG		RCT_REG(SOFT_OR_DLL_RESET_OFFSET)

#define SOFT_RESET_MASK			0x1

/* ==========================================================================*/
#define FIO_RESET_OFFSET		0x74
#define FIO_RESET_REG			RCT_REG(FIO_RESET_OFFSET)
#define FIO_RESET_FIO_RST		0x00000008
#define FIO_RESET_CF_RST		0x00000004
#define FIO_RESET_XD_RST		0x00000002
#define FIO_RESET_FLASH_RST		0x00000001

/* ==========================================================================*/

#define USBC_CTRL_OFFSET		0x2cc
#define UDC_SOFT_RESET_OFFSET		USBC_CTRL_OFFSET
#define UDC_SOFT_RESET_MASK		0x2
#define UDC_SOFT_RESET_REG		RCT_REG(UDC_SOFT_RESET_OFFSET)

#define USBP0_SEL_OFFSET		0x2c0
#define USBP0_SEL_REG			RCT_REG(USBP0_SEL_OFFSET)

#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || \
	(CHIP_REV == S5) || (CHIP_REV == S5L) || (CHIP_REV == CV1)
#define USB0_IDDIG0_MASK		0x00000001
#define USB0_IS_HOST_MASK		0x00000002
#else
#define USB0_IDDIG0_MASK		0x00000000
#define USB0_IS_HOST_MASK		0x00000001
#endif
#define USBP0_FORCE_TO_DEVICE		1

/* ==========================================================================*/
#define PLL_AUDIO_CTRL_OFFSET		0x54
#define PLL_AUDIO_FRAC_OFFSET		0x58
#define SCALER_AUDIO_POST_OFFSET	0x5C
#define SCALER_AUDIO_PRE_OFFSET		0x60
#define PLL_AUDIO_CTRL2_OFFSET		0x124
#define PLL_AUDIO_CTRL3_OFFSET		0x12c

#define PLL_AUDIO_CTRL_REG		RCT_REG(PLL_AUDIO_CTRL_OFFSET)
#define PLL_AUDIO_FRAC_REG		RCT_REG(PLL_AUDIO_FRAC_OFFSET)
#define SCALER_AUDIO_POST_REG		RCT_REG(SCALER_AUDIO_POST_OFFSET)
#define SCALER_AUDIO_PRE_REG		RCT_REG(SCALER_AUDIO_PRE_OFFSET)
#define PLL_AUDIO_CTRL2_REG		RCT_REG(PLL_AUDIO_CTRL2_OFFSET)
#define PLL_AUDIO_CTRL3_REG		RCT_REG(PLL_AUDIO_CTRL3_OFFSET)

/* ==========================================================================*/
#define ANA_PWR_OFFSET			0x50
#define ANA_PWR_REG			RCT_REG(ANA_PWR_OFFSET)
#define ANA_PWR_POWER_DOWN		0x0020

#define SYS_CONFIG_OFFSET		0x34
#define SYS_CONFIG_REG			RCT_REG(SYS_CONFIG_OFFSET)

/* ==========================================================================*/

#define UNLOCK_WDT_RST_L_VAL		0x01

#define WDT_RST_L_OFFSET		0x78
#define UNLOCK_WDT_RST_L_OFFSET		0x260
#define WDT_RST_L_REG			RCT_REG(WDT_RST_L_OFFSET)
#define UNLOCK_WDT_RST_L_REG		RCT_REG(UNLOCK_WDT_RST_L_OFFSET)

/* ==========================================================================*/
#define CG_UART0_OFFSET			0x38
#define CG_SSI_OFFSET			0x3C
#define CG_MOTOR_OFFSET			0x40
#define CG_IR_OFFSET			0x44
#define CG_HOST_OFFSET			0x48
#define CG_PWM_OFFSET			0x84
#define CG_SSI2_OFFSET			0xEC
#define CLK_REF_SSI_OFFSET		0x19c
#define CG_SSI3_OFFSET			0x518
#define CLK_REF_SSI3_OFFSET		0x51c
#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || (CHIP_REV == S5)
#define CG_UART1_OFFSET			CG_UART0_OFFSET
#define CG_UART2_OFFSET			CG_UART0_OFFSET
#elif (CHIP_REV == S5L)
#define CG_UART1_OFFSET			0x75c
#define CG_UART2_OFFSET			0x764
#else
#define CG_UART1_OFFSET			0x714
#define CG_UART2_OFFSET			0x718
#endif
#define CG_UART3_OFFSET			0x71c
#define CG_UART4_OFFSET			0x720
#define CG_UART5_OFFSET			0x724
#define CG_UART6_OFFSET			0x728

#define CG_UART0_REG			RCT_REG(CG_UART0_OFFSET)
#define CG_SSI_REG			RCT_REG(CG_SSI_OFFSET)
#define CG_MOTOR_REG			RCT_REG(CG_MOTOR_OFFSET)
#define CG_IR_REG			RCT_REG(CG_IR_OFFSET)
#define CG_HOST_REG			RCT_REG(CG_HOST_OFFSET)
#define CG_PWM_REG			RCT_REG(CG_PWM_OFFSET)
#define CG_SSI2_REG			RCT_REG(CG_SSI2_OFFSET)
#define CG_SSI3_REG			RCT_REG(CG_SSI3_OFFSET)
#define CLK_REF_SSI_REG			RCT_REG(CLK_REF_SSI_OFFSET)
#define CLK_REF_SSI3_REG		RCT_REG(CLK_REF_SSI3_OFFSET)
#define CG_UART1_REG			RCT_REG(CG_UART1_OFFSET)
#define CG_UART2_REG			RCT_REG(CG_UART2_OFFSET)
#define CG_UART3_REG			RCT_REG(CG_UART3_OFFSET)
#define CG_UART4_REG			RCT_REG(CG_UART4_OFFSET)
#define CG_UART5_REG			RCT_REG(CG_UART5_OFFSET)
#define CG_UART6_REG			RCT_REG(CG_UART6_OFFSET)
#define CG_UART_REG(n)			((n) == 0 ? CG_UART0_REG : \
					 (n) == 1 ? CG_UART1_REG : \
					 (n) == 2 ? CG_UART2_REG : \
					 (n) == 3 ? CG_UART3_REG : \
					 (n) == 4 ? CG_UART4_REG : \
					 (n) == 5 ? CG_UART5_REG : \
						    CG_UART6_REG)

#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || (CHIP_REV == S5)
#define UART_CLK_SRC_CLK_REF		0x00
#define UART_CLK_SRC_CORE		0x01
#define UART_CLK_SRC_IDSP		0x03
#elif (CHIP_REV == S5L)
#define UART_CLK_SRC_CLK_REF		0x00
#define UART_CLK_SRC_CORTEX		0x01
#define UART_CLK_SRC_ENET		0x03
#else
#define UART_CLK_SRC_CLK_REF		0x00
#define UART_CLK_SRC_CORE		0x01
#define UART_CLK_SRC_ENET		0x02
#define UART_CLK_SRC_SD			0x03
#endif

#define UART_CLK_SRC_SEL_OFFSET		0x1C8
#define UART1_CLK_SRC_SEL_OFFSET	0x72c
#define UART2_CLK_SRC_SEL_OFFSET	0x730
#define UART3_CLK_SRC_SEL_OFFSET	0x734
#define UART4_CLK_SRC_SEL_OFFSET	0x738
#define UART5_CLK_SRC_SEL_OFFSET	0x73c
#define UART6_CLK_SRC_SEL_OFFSET	0x740
#define UART_CLK_SRC_SEL_REG		RCT_REG(UART_CLK_SRC_SEL_OFFSET)
#define UART1_CLK_SRC_SEL_REG		RCT_REG(UART1_CLK_SRC_SEL_OFFSET)
#define UART2_CLK_SRC_SEL_REG		RCT_REG(UART2_CLK_SRC_SEL_OFFSET)
#define UART3_CLK_SRC_SEL_REG		RCT_REG(UART3_CLK_SRC_SEL_OFFSET)
#define UART4_CLK_SRC_SEL_REG		RCT_REG(UART4_CLK_SRC_SEL_OFFSET)
#define UART5_CLK_SRC_SEL_REG		RCT_REG(UART5_CLK_SRC_SEL_OFFSET)
#define UART6_CLK_SRC_SEL_REG		RCT_REG(UART6_CLK_SRC_SEL_OFFSET)

/* ==========================================================================*/
#define PLL_CORE_CTRL_OFFSET		0x00
#define PLL_CORE_FRAC_OFFSET		0x04
#define PLL_CORE_CTRL2_OFFSET		0x100
#define PLL_CORE_CTRL3_OFFSET		0x104
#define PLL_CORE_CTRL_REG		RCT_REG(PLL_CORE_CTRL_OFFSET)
#define PLL_CORE_FRAC_REG		RCT_REG(PLL_CORE_FRAC_OFFSET)
#define PLL_CORE_CTRL2_REG		RCT_REG(PLL_CORE_CTRL2_OFFSET)
#define PLL_CORE_CTRL3_REG		RCT_REG(PLL_CORE_CTRL3_OFFSET)

/* ==========================================================================*/

#define PLL_HDMILC_CTRL_OFFSET		0x404
#define PLL_HDMILC_FRAC_OFFSET		0x408
#define PLL_HDMILC_CTRL2_OFFSET		0x40c
#define PLL_HDMILC_CTRL3_OFFSET		0x410
#define PLL_HDMILC_CTRL4_OFFSET		0x418
#define PLL_HDMILC_CTRL_REG		RCT_REG(PLL_HDMILC_CTRL_OFFSET)
#define PLL_HDMILC_FRAC_REG		RCT_REG(PLL_HDMILC_FRAC_OFFSET)
#define PLL_HDMILC_CTRL2_REG		RCT_REG(PLL_HDMILC_CTRL2_OFFSET)
#define PLL_HDMILC_CTRL3_REG		RCT_REG(PLL_HDMILC_CTRL3_OFFSET)
#define PLL_HDMILC_CTRL4_REG		RCT_REG(PLL_HDMILC_CTRL4_OFFSET)

/* ==========================================================================*/
#define CKEN_CLUSTER_REG_OFFSET		0x8C
#define PLL_IDSP_CTRL_OFFSET		0xE4
#define PLL_IDSP_FRAC_OFFSET		0xE8
#define PLL_IDSP_CTRL2_OFFSET		0x108
#define PLL_IDSP_CTRL3_OFFSET		0x10C
#define SCALER_IDSP_POST_OFFSET		0x1F4

#define CKEN_CLUSTER_REG		RCT_REG(CKEN_CLUSTER_REG_OFFSET)
#define PLL_IDSP_CTRL_REG		RCT_REG(PLL_IDSP_CTRL_OFFSET)
#define PLL_IDSP_FRAC_REG		RCT_REG(PLL_IDSP_FRAC_OFFSET)
#define PLL_IDSP_CTRL2_REG		RCT_REG(PLL_IDSP_CTRL2_OFFSET)
#define PLL_IDSP_CTRL3_REG		RCT_REG(PLL_IDSP_CTRL3_OFFSET)
#define SCALER_IDSP_POST_REG		RCT_REG(SCALER_IDSP_POST_OFFSET)

/* ==========================================================================*/
#define PLL_DDR_CTRL_OFFSET		0xDC
#define PLL_DDR_FRAC_OFFSET		0xE0
#define PLL_DDR_CTRL2_OFFSET		0x110
#define PLL_DDR_CTRL3_OFFSET		0x114

#define PLL_DDR_CTRL_REG		RCT_REG(PLL_DDR_CTRL_OFFSET)
#define PLL_DDR_FRAC_REG		RCT_REG(PLL_DDR_FRAC_OFFSET)
#define PLL_DDR_CTRL2_REG		RCT_REG(PLL_DDR_CTRL2_OFFSET)
#define PLL_DDR_CTRL3_REG		RCT_REG(PLL_DDR_CTRL3_OFFSET)

/* ==========================================================================*/
#define PLL_SENSOR_CTRL_OFFSET		0x24
#define PLL_SENSOR_FRAC_OFFSET		0x28
#define PLL_SENSOR_CTRL2_OFFSET		0x11C
#define PLL_SENSOR_CTRL3_OFFSET		0x120
#define SCALER_SENSOR_PRE_OFFSET	0x4C
#define SCALER_SENSOR_POST_OFFSET	0x30
#define CLK_SI_INPUT_MODE_OFFSET	0xBC
#define SCALER_SENSOR_VIN_OFFSET	0x230

#define PLL_SENSOR_CTRL_REG		RCT_REG(PLL_SENSOR_CTRL_OFFSET)
#define PLL_SENSOR_FRAC_REG		RCT_REG(PLL_SENSOR_FRAC_OFFSET)
#define PLL_SENSOR_CTRL2_REG		RCT_REG(PLL_SENSOR_CTRL2_OFFSET)
#define PLL_SENSOR_CTRL3_REG		RCT_REG(PLL_SENSOR_CTRL3_OFFSET)
#define SCALER_SENSOR_PRE_REG		RCT_REG(SCALER_SENSOR_PRE_OFFSET)
#define SCALER_SENSOR_POST_REG		RCT_REG(SCALER_SENSOR_POST_OFFSET)
#define CLK_SI_INPUT_MODE_REG		RCT_REG(CLK_SI_INPUT_MODE_OFFSET)
#define SCALER_SENSOR_VIN_REG		RCT_REG(SCALER_SENSOR_VIN_OFFSET)

#define SO_PIP_CLK_SRC_SEL_OFFSET	0x798
#define SO_PIP_CLK_SRC_SEL_REG		RCT_REG(SO_PIP_CLK_SRC_SEL_OFFSET)

/* ==========================================================================*/

#define HDMI_CLOCK_CTRL_OFFSET          0x008
#define PLL_HDMI_CTRL_OFFSET		0x164
#define PLL_HDMI_CTRL2_OFFSET		0x150
#define PLL_HDMI_CTRL3_OFFSET		0x154
#define PLL_HDMI_FRAC_OFFSET		0x168
#define SCALER_HDMI_PRE_OFFSET		0x170
#define SCALER_HDMI_POST_OFFSET		0x16C

#define HDMI_CLOCK_CTRL_REG		RCT_REG(HDMI_CLOCK_CTRL_OFFSET)
#define PLL_HDMI_CTRL_REG		RCT_REG(PLL_HDMI_CTRL_OFFSET)
#define PLL_HDMI_CTRL2_REG		RCT_REG(PLL_HDMI_CTRL2_OFFSET)
#define PLL_HDMI_CTRL3_REG		RCT_REG(PLL_HDMI_CTRL3_OFFSET)
#define PLL_HDMI_FRAC_REG		RCT_REG(PLL_HDMI_FRAC_OFFSET)
#define SCALER_HDMI_PRE_REG		RCT_REG(SCALER_HDMI_PRE_OFFSET)
#define SCALER_HDMI_POST_REG		RCT_REG(SCALER_HDMI_POST_OFFSET)

#define USE_CLK_SI_4_CLK_VO_OFFSET  	0xB8
#define CLK_REF_VIDEO_EXTERNAL_OFFSET	0xAC

#define USE_CLK_SI_4_CLK_VO_REG		RCT_REG(USE_CLK_SI_4_CLK_VO_OFFSET)
#define CLK_REF_VIDEO_EXTERNAL_REG	RCT_REG(CLK_REF_VIDEO_EXTERNAL_OFFSET)

/* ==========================================================================*/
#define PLL_VIDEO_CTRL_OFFSET		0x14
#define PLL_VIDEO_FRAC_OFFSET		0x18
#define SCALER_VIDEO_PRE_OFFSET		0x1C
#define SCALER_VIDEO_POST_OFFSET	0xA0
#define PLL_VIDEO_CTRL2_OFFSET		0x130
#define PLL_VIDEO_CTRL3_OFFSET		0x134
#define PLL_VIDEO_CTRL_REG		RCT_REG(PLL_VIDEO_CTRL_OFFSET)
#define PLL_VIDEO_FRAC_REG		RCT_REG(PLL_VIDEO_FRAC_OFFSET)
#define SCALER_VIDEO_PRE_REG		RCT_REG(SCALER_VIDEO_PRE_OFFSET)
#define SCALER_VIDEO_POST_REG		RCT_REG(SCALER_VIDEO_POST_OFFSET)
#define PLL_VIDEO_CTRL2_REG		RCT_REG(PLL_VIDEO_CTRL2_OFFSET)
#define PLL_VIDEO_CTRL3_REG		RCT_REG(PLL_VIDEO_CTRL3_OFFSET)

#define PLL_VIDEO2_CTRL_OFFSET		0xC0
#define PLL_VIDEO2_FRAC_OFFSET		0xC4
#define SCALER_VIDEO2_PRE_OFFSET	0xC8
#define SCALER_VIDEO2_POST_OFFSET	0xCC
#define PLL_VIDEO2_CTRL2_OFFSET		0x13C
#define PLL_VIDEO2_CTRL3_OFFSET		0x140
#define USE_CLK_SI_4_VO2_OFFSET		0xD0
#define USE_EXTERNAL_VD2_CLK_OFFSET	0xD4
#define CLK_REF_VIDEO2_EXTERNAL_OFFSET	0xD8

#define PLL_VIDEO2_CTRL_REG		RCT_REG(PLL_VIDEO2_CTRL_OFFSET)
#define PLL_VIDEO2_FRAC_REG		RCT_REG(PLL_VIDEO2_FRAC_OFFSET)
#define SCALER_VIDEO2_PRE_REG		RCT_REG(SCALER_VIDEO2_PRE_OFFSET)
#define SCALER_VIDEO2_POST_REG		RCT_REG(SCALER_VIDEO2_POST_OFFSET)
#define PLL_VIDEO2_CTRL2_REG		RCT_REG(PLL_VIDEO2_CTRL2_OFFSET)
#define PLL_VIDEO2_CTRL3_REG		RCT_REG(PLL_VIDEO2_CTRL3_OFFSET)
#define USE_CLK_SI_4_VO2_REG		RCT_REG(USE_CLK_SI_4_VO2_OFFSET)
#define USE_EXTERNAL_VD2_CLK_REG	RCT_REG(USE_EXTERNAL_VD2_CLK_OFFSET)
#define CLK_REF_VIDEO2_EXTERNAL_REG	RCT_REG(CLK_REF_VIDEO2_EXTERNAL_OFFSET)

/* ==========================================================================*/
#if (CHIP_REV == CV2FS)
#define PLL_CORTEX_CTRL_OFFSET		0x278
#define PLL_CORTEX_FRAC_OFFSET		0x27C
#define PLL_CORTEX_CTRL2_OFFSET		0x280
#define PLL_CORTEX_CTRL3_OFFSET		0x284
#else
#define PLL_CORTEX_CTRL_OFFSET		0x264
#define PLL_CORTEX_FRAC_OFFSET		0x268
#define PLL_CORTEX_CTRL2_OFFSET		0x26C
#define PLL_CORTEX_CTRL3_OFFSET		0x270
#endif
#define PLL_CORTEX_CTRL_REG		RCT_REG(PLL_CORTEX_CTRL_OFFSET)
#define PLL_CORTEX_FRAC_REG		RCT_REG(PLL_CORTEX_FRAC_OFFSET)
#define PLL_CORTEX_CTRL2_REG		RCT_REG(PLL_CORTEX_CTRL2_OFFSET)
#define PLL_CORTEX_CTRL3_REG		RCT_REG(PLL_CORTEX_CTRL3_OFFSET)

/* ==========================================================================*/

#define PLL_VISION_CTRL_OFFSET		0x6E4
#define PLL_VISION_FRAC_OFFSET		0x6E8
#define PLL_VISION_CTRL2_OFFSET		0x6EC
#define PLL_VISION_CTRL3_OFFSET		0x6F0
#define PLL_VISION_CTRL_REG		RCT_REG(PLL_VISION_CTRL_OFFSET)
#define PLL_VISION_FRAC_REG		RCT_REG(PLL_VISION_FRAC_OFFSET)
#define PLL_VISION_CTRL2_REG		RCT_REG(PLL_VISION_CTRL2_OFFSET)
#define PLL_VISION_CTRL3_REG		RCT_REG(PLL_VISION_CTRL3_OFFSET)

/* ==========================================================================*/
#if (CHIP_REV == CV2)
#define PLL_FEX_CTRL_OFFSET		0x6D0
#define PLL_FEX_FRAC_OFFSET		0x6D4
#define PLL_FEX_CTRL2_OFFSET		0x6D8
#define PLL_FEX_CTRL3_OFFSET		0x6DC
#define PLL_FEX_CTRL_REG		RCT_REG(PLL_FEX_CTRL_OFFSET)
#define PLL_FEX_FRAC_REG		RCT_REG(PLL_FEX_FRAC_OFFSET)
#define PLL_FEX_CTRL2_REG		RCT_REG(PLL_FEX_CTRL2_OFFSET)
#define PLL_FEX_CTRL3_REG		RCT_REG(PLL_FEX_CTRL3_OFFSET)
#endif
/* ==========================================================================*/
#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == CV2FS)
#define ENET_CLK_SRC_SEL_OFFSET		RCT_INVALID_OFFSET
#elif (CHIP_REV == S3L) || (CHIP_REV == S5L)
#define ENET_CLK_SRC_SEL_OFFSET		0x544
#else
#define ENET_CLK_SRC_SEL_OFFSET		0x6B8
#endif
#define ENET_CLK_SRC_SEL_REG		RCT_REG(ENET_CLK_SRC_SEL_OFFSET)

#define ENET_SEL			(1 << 0)
#define ENET_PHY_INTF_SEL_RMII		(1 << 1)
#define ENET_CLK_SRC_SEL		(1 << 2)

#if (CHIP_REV == S6LM) || (CHIP_REV == CV2FS) || (CHIP_REV == CV28)
#define RCT_ENET_CTRL_OFFSET		0x79C
#else /* non-exist on chips before CV25 */
#define RCT_ENET_CTRL_OFFSET		RCT_INVALID_OFFSET
#endif
#define RCT_ENET_CTRL_REG		RCT_REG(RCT_ENET_CTRL_OFFSET)

#if (CHIP_REV == CV2FS)
#define RCT_ENET_CLK_SRC_SEL_VAL	ENET_CLK_SRC_SEL
#define RCT_ENET_CLK_SRC_SEL_OFFSET	RCT_ENET_CTRL_OFFSET
#define RCT_ENET_CLK_SRC_SEL_REG	RCT_ENET_CTRL_REG
#else
#define RCT_ENET_CLK_SRC_SEL_VAL	(1 << 0)
#define RCT_ENET_CLK_SRC_SEL_OFFSET	ENET_CLK_SRC_SEL_OFFSET
#define RCT_ENET_CLK_SRC_SEL_REG	ENET_CLK_SRC_SEL_REG
#endif

#define SCALER_GTX_POST_OFFSET		0x2A8
#define ENET_GTXCLK_SRC_OFFSET		0x2B0
#define SCALER_GTX_POST_REG		RCT_REG(SCALER_GTX_POST_OFFSET)
#define ENET_GTXCLK_SRC_REG		RCT_REG(ENET_GTXCLK_SRC_OFFSET)

#define PLL_ENET_CTRL_OFFSET		0x520
#define PLL_ENET_FRAC_OFFSET		0x524
#define PLL_ENET_CTRL2_OFFSET		0x528
#define PLL_ENET_CTRL3_OFFSET		0x52C
#define SCALER_ENET_POST_OFFSET		0x534
#define PLL_ENET_CTRL_REG		RCT_REG(PLL_ENET_CTRL_OFFSET)
#define PLL_ENET_FRAC_REG		RCT_REG(PLL_ENET_FRAC_OFFSET)
#define PLL_ENET_CTRL2_REG		RCT_REG(PLL_ENET_CTRL2_OFFSET)
#define PLL_ENET_CTRL3_REG		RCT_REG(PLL_ENET_CTRL3_OFFSET)
#define SCALER_ENET_POST_REG		RCT_REG(SCALER_ENET_POST_OFFSET)

/* ==========================================================================*/
#define SCALER_SD0_OFFSET		0x00C
#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S5) || (CHIP_REV == S6LM) || \
	(CHIP_REV == CV25) || (CHIP_REV == CV2FS) || (CHIP_REV == CV28)
#define SCALER_SD1_OFFSET		0x430
#else
#define SCALER_SD1_OFFSET		0x434
#endif
#define SCALER_SD2_OFFSET		0x434
#define SCALER_SD0_REG			RCT_REG(SCALER_SD0_OFFSET)
#define SCALER_SD1_REG			RCT_REG(SCALER_SD1_OFFSET)
#define SCALER_SD2_REG			RCT_REG(SCALER_SD2_OFFSET)

#define SCALER_SD_REG(id)		((id == 0) ? SCALER_SD0_REG : \
					 (id == 1) ? SCALER_SD1_REG : SCALER_SD2_REG)

#define PLL_SD_CTRL_OFFSET		0x4AC
#define PLL_SD_FRAC_OFFSET		0x4B0
#define PLL_SD_CTRL2_OFFSET		0x4B4
#define PLL_SD_CTRL3_OFFSET		0x4B8
#define PLL_SD_CTRL_REG			RCT_REG(PLL_SD_CTRL_OFFSET)
#define PLL_SD_FRAC_REG			RCT_REG(PLL_SD_FRAC_OFFSET)
#define PLL_SD_CTRL2_REG		RCT_REG(PLL_SD_CTRL2_OFFSET)
#define PLL_SD_CTRL3_REG		RCT_REG(PLL_SD_CTRL3_OFFSET)

#define SD_PHY_DIN_CLK_POL		1 << (27 - 16)
#define SD_PHY_CLKOUT_BYPASS		1 << (26 - 16)
#define SD_PHY_RESET			1 << (25 - 16)
#define SD_PHY_DLL_CLK_POL		1 << (19 - 16)
#define SD_PHY_DATA_CMD_BYPASS		1 << (18 - 16)
#define SD_PHY_DLL_BYPASS		1 << (17 - 16)

#define SD_PHY_SBC_DEFAULT_VALUE	0xb881
#define SD_PHY_MAX_DLL_VFINE		0x1f

#define SD0_PHY_CTRL_0_OFFSET		0x4C0
#define SD0_PHY_CTRL_1_OFFSET		0x4C4
#define SD_PHY_OBSV_OFFSET		0x4f0
#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L)
#define SD0_PHY_CTRL_2_OFFSET		SD0_PHY_CTRL_0_OFFSET
#elif (CHIP_REV == S5L)
#define SD0_PHY_CTRL_2_OFFSET		0x6f0
#else
#define SD0_PHY_CTRL_2_OFFSET		0x664
#endif
#define SD0_PHY_CTRL_0_REG		RCT_REG(SD0_PHY_CTRL_0_OFFSET)
#define SD0_PHY_CTRL_1_REG		RCT_REG(SD0_PHY_CTRL_1_OFFSET)
#define SD0_PHY_CTRL_2_REG		RCT_REG(SD0_PHY_CTRL_2_OFFSET)
#define SD_PHY_OBSV_REG			RCT_REG(SD_PHY_OBSV_OFFSET)

#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S5)
#define SD1_PHY_CTRL_0_OFFSET		RCT_INVALID_OFFSET
#define SD1_PHY_CTRL_1_OFFSET		RCT_INVALID_OFFSET
#define SD1_PHY_CTRL_2_OFFSET		RCT_INVALID_OFFSET
#elif (CHIP_REV == S3L)
#define SD1_PHY_CTRL_0_OFFSET		0x4C8
#define SD1_PHY_CTRL_1_OFFSET		0x4CC
#define SD1_PHY_CTRL_2_OFFSET		SD1_PHY_CTRL_0_OFFSET
#elif (CHIP_REV == S5L)
#define SD1_PHY_CTRL_0_OFFSET		0x4C8
#define SD1_PHY_CTRL_1_OFFSET		0x4CC
#define SD1_PHY_CTRL_2_OFFSET		0x6f4
#else
#define SD1_PHY_CTRL_0_OFFSET		0x4C8
#define SD1_PHY_CTRL_1_OFFSET		0x4CC
#define SD1_PHY_CTRL_2_OFFSET		0x668
#endif
#define SD1_PHY_CTRL_0_REG		RCT_REG(SD1_PHY_CTRL_0_OFFSET)
#define SD1_PHY_CTRL_1_REG		RCT_REG(SD1_PHY_CTRL_1_OFFSET)
#define SD1_PHY_CTRL_2_REG		RCT_REG(SD1_PHY_CTRL_2_OFFSET)

#if (CHIP_REV == S3)
#define SD2_PHY_CTRL_0_OFFSET		0x4C8
#define SD2_PHY_CTRL_1_OFFSET		0x4CC
#define SD2_PHY_CTRL_2_OFFSET		SD2_PHY_CTRL_0_OFFSET
#elif (CHIP_REV == S5)
#define SD2_PHY_CTRL_0_OFFSET		0x4C8
#define SD2_PHY_CTRL_1_OFFSET		0x4CC
#define SD2_PHY_CTRL_2_OFFSET		0x668
#else
#define SD2_PHY_CTRL_0_OFFSET		RCT_INVALID_OFFSET
#define SD2_PHY_CTRL_1_OFFSET		RCT_INVALID_OFFSET
#define SD2_PHY_CTRL_2_OFFSET		RCT_INVALID_OFFSET
#endif
#define SD2_PHY_CTRL_0_REG		RCT_REG(SD2_PHY_CTRL_0_OFFSET)
#define SD2_PHY_CTRL_1_REG		RCT_REG(SD2_PHY_CTRL_1_OFFSET)
#define SD2_PHY_CTRL_2_REG		RCT_REG(SD2_PHY_CTRL_2_OFFSET)

#define SD_PHY_CTRL_0_REG(id)		((id == 0) ? SD0_PHY_CTRL_0_REG : \
					 (id == 1) ? SD1_PHY_CTRL_0_REG : SD2_PHY_CTRL_0_REG)
#define SD_PHY_CTRL_1_REG(id)		((id == 0) ? SD0_PHY_CTRL_1_REG : \
					 (id == 1) ? SD1_PHY_CTRL_1_REG : SD2_PHY_CTRL_1_REG)
#define SD_PHY_CTRL_2_REG(id)		((id == 0) ? SD0_PHY_CTRL_2_REG : \
					 (id == 1) ? SD1_PHY_CTRL_2_REG : SD2_PHY_CTRL_2_REG)

#if (CHIP_REV == CV2)
#define OTP_CTRL1_OFFSET		0x760
#define OTP_OBSV_OFFSET			0x768
#define OTP_READ_DOUT_OFFSET		0x76C

#define OTP_CTRL1_REG			RCT_REG(OTP_CTRL1_OFFSET)
#define OTP_OBSV_REG			RCT_REG(OTP_OBSV_OFFSET)
#define OTP_READ_DOUT_REG		RCT_REG(OTP_READ_DOUT_OFFSET)
#endif

/* ==========================================================================*/

#if (CHIP_REV == S6LM) || (CHIP_REV == CV28)
#define PLL_NAND_CTRL_OFFSET		RCT_INVALID_OFFSET
#define PLL_NAND_FRAC_OFFSET		RCT_INVALID_OFFSET
#define PLL_NAND_CTRL2_OFFSET		RCT_INVALID_OFFSET
#define PLL_NAND_CTRL3_OFFSET		RCT_INVALID_OFFSET
#else
#define PLL_NAND_CTRL_OFFSET		0x6f8
#define PLL_NAND_FRAC_OFFSET		0x6fc
#define PLL_NAND_CTRL2_OFFSET		0x700
#define PLL_NAND_CTRL3_OFFSET		0x704
#endif
#define PLL_NAND_CTRL_REG		RCT_REG(PLL_NAND_CTRL_OFFSET)
#define PLL_NAND_FRAC_REG		RCT_REG(PLL_NAND_FRAC_OFFSET)
#define PLL_NAND_CTRL2_REG		RCT_REG(PLL_NAND_CTRL2_OFFSET)
#define PLL_NAND_CTRL3_REG		RCT_REG(PLL_NAND_CTRL3_OFFSET)


/* ==========================================================================*/
#define ADC_SOFT_RESET			(1 << 16)
#define SCALER_ADC_OFFSET		0x09C
#define SCALER_ADC_REG			RCT_REG(SCALER_ADC_OFFSET)

#define T2V_CTRL_OFFSET			0x1A0
#define T2V_CTRL_REG			RCT_REG(T2V_CTRL_OFFSET)

#define ADC16_CTRL_OFFSET		0x198
#define ADC16_CTRL_REG			RCT_REG(ADC16_CTRL_OFFSET)

#define ADC_POWER_DOWN			0x2
#define ADC_SCALER_POWER_DOWN		0xf00

/* ==========================================================================*/
#define RNG_CTRL_OFFSET			0x1A4
#define RNG_CTRL_REG			RCT_REG(RNG_CTRL_OFFSET)
#define RNG_CTRL_PD			(1 << 0)

/* ==========================================================================*/
#define AHB_MISC_OFFSET			0x21C
#define AHB_MISC_REG			RCT_REG(AHB_MISC_OFFSET)
#define AHB_MISC_EN_REG			AHB_MISC_REG

/* ==========================================================================*/
#define VOUT_CLK_SEL_OFFSET		0x744
#define VOUT_CLK_SEL_REG		RCT_REG(VOUT_CLK_SEL_OFFSET)

/* ==========================================================================*/
#define VIN_CLK_SEL_OFFSET		0x748
#define VIN_CLK_SEL_REG			RCT_REG(VIN_CLK_SEL_OFFSET)

/* ==========================================================================*/
#define IOCTRL_GPIO_OFFSET		0x1F8
#define IOCTRL_MISC1_OFFSET		0x1FC
#define IOCTRL_MISC2_OFFSET		0x200
#define IOCTRL_SMIOA_OFFSET		0x204
#define IOCTRL_SMIOB_OFFSET		0x208
#define IOCTRL_SMIOC_OFFSET		0x20C
#define IOCTRL_SMIOD_OFFSET		0x210
#define IOCTRL_VD0_OFFSET		0x214
#define IOCTRL_SENSOR_OFFSET		0x218
#define IOCTRL_GPIO_REG			RCT_REG(IOCTRL_GPIO_OFFSET)
#define IOCTRL_MISC1_REG		RCT_REG(IOCTRL_MISC1_OFFSET)
#define IOCTRL_MISC2_REG		RCT_REG(IOCTRL_MISC2_OFFSET)
#define IOCTRL_SMIOA_REG		RCT_REG(IOCTRL_SMIOA_OFFSET)
#define IOCTRL_SMIOB_REG		RCT_REG(IOCTRL_SMIOB_OFFSET)
#define IOCTRL_SMIOC_REG		RCT_REG(IOCTRL_SMIOC_OFFSET)
#define IOCTRL_SMIOD_REG		RCT_REG(IOCTRL_SMIOD_OFFSET)
#define IOCTRL_VD0_REG			RCT_REG(IOCTRL_VD0_OFFSET)
#define IOCTRL_SENSOR_REG		RCT_REG(IOCTRL_SENSOR_OFFSET)

#define IOCTRL_DRIVE_STRENGTH_2MA	0x0
#define IOCTRL_DRIVE_STRENGTH_8MA	0x1
#define IOCTRL_DRIVE_STRENGTH_4MA	0x2
#define IOCTRL_DRIVE_STRENGTH_12MA	0x3

#define GPIO_DS0_0_OFFSET		0x314
#define GPIO_DS1_0_OFFSET		0x318
#define GPIO_DS0_1_OFFSET		0x31C
#define GPIO_DS1_1_OFFSET		0x320
#define GPIO_DS0_2_OFFSET		0x324
#define GPIO_DS1_2_OFFSET		0x328
#define GPIO_DS0_3_OFFSET		0x32C
#define GPIO_DS1_3_OFFSET		0x330
#define GPIO_DS0_4_OFFSET		0x438
#define GPIO_DS1_4_OFFSET		0x43C
#define GPIO_DS0_5_OFFSET		0x440
#define GPIO_DS1_5_OFFSET		0x444
#define GPIO_DS0_6_OFFSET		0x448
#define GPIO_DS1_6_OFFSET		0x44C
#define GPIO_DS0_OFFSET(bank)		((bank) >= 4 ? \
					(0x438 + (((bank) - 4) * 8)) : \
					(0x314 + ((bank) * 8)))
#define GPIO_DS1_OFFSET(bank)		((bank) >= 4 ? \
					(0x438 + (((bank) - 4) * 8) + 4) : \
					(0x314 + ((bank) * 8) + 4))

#define GPIO_DS0_0_REG			RCT_REG(GPIO_DS0_0_OFFSET)
#define GPIO_DS1_0_REG			RCT_REG(GPIO_DS1_0_OFFSET)
#define GPIO_DS0_1_REG			RCT_REG(GPIO_DS0_1_OFFSET)
#define GPIO_DS1_1_REG			RCT_REG(GPIO_DS1_1_OFFSET)
#define GPIO_DS0_2_REG			RCT_REG(GPIO_DS0_2_OFFSET)
#define GPIO_DS1_2_REG			RCT_REG(GPIO_DS1_2_OFFSET)
#define GPIO_DS0_3_REG			RCT_REG(GPIO_DS0_3_OFFSET)
#define GPIO_DS1_3_REG			RCT_REG(GPIO_DS1_3_OFFSET)
#define GPIO_DS0_4_REG			RCT_REG(GPIO_DS0_4_OFFSET)
#define GPIO_DS1_4_REG			RCT_REG(GPIO_DS1_4_OFFSET)
#define GPIO_DS0_5_REG			RCT_REG(GPIO_DS0_5_OFFSET)
#define GPIO_DS1_5_REG			RCT_REG(GPIO_DS1_5_OFFSET)
#define GPIO_DS0_6_REG			RCT_REG(GPIO_DS0_6_OFFSET)
#define GPIO_DS1_6_REG			RCT_REG(GPIO_DS1_6_OFFSET)

/* ==========================================================================*/

#define RCT_TIMER_INSTANCES		2

#define RCT_TIMER_OFFSET		0x254
#define RCT_TIMER_CTRL_OFFSET		0x258
#define RCT_TIMER_REG			RCT_REG(RCT_TIMER_OFFSET)
#define RCT_TIMER_CTRL_REG		RCT_REG(RCT_TIMER_CTRL_OFFSET)

#define RCT_TIMER2_OFFSET		0x494
#define RCT_TIMER2_CTRL_OFFSET		0x498
#define RCT_TIMER2_REG			RCT_REG(RCT_TIMER2_OFFSET)
#define RCT_TIMER2_CTRL_REG		RCT_REG(RCT_TIMER2_CTRL_OFFSET)

/* ==========================================================================*/
#if (CHIP_REV == CV22) || (CHIP_REV == CV2)
#define RCT_OTP_T2V_CALIB_OFFSET	0x770
#else
#define RCT_OTP_T2V_CALIB_OFFSET	RCT_INVALID_OFFSET
#endif
/* ==========================================================================*/

#define RCT_STATUS_HOLD0_OFFSET		0x780
#define RCT_STATUS_HOLD1_OFFSET		0x784
#define RCT_STATUS_HOLD2_OFFSET		0x788
#define RCT_STATUS_HOLD3_OFFSET		0x78C
#define RCT_STATUS_HOLD4_OFFSET		0x790
#define RCT_STATUS_HOLD0_REG		RCT_REG(RCT_STATUS_HOLD0_OFFSET)
#define RCT_STATUS_HOLD1_REG		RCT_REG(RCT_STATUS_HOLD1_OFFSET)
#define RCT_STATUS_HOLD2_REG		RCT_REG(RCT_STATUS_HOLD2_OFFSET)
#define RCT_STATUS_HOLD3_REG		RCT_REG(RCT_STATUS_HOLD3_OFFSET)
#define RCT_STATUS_HOLD4_REG		RCT_REG(RCT_STATUS_HOLD4_OFFSET)

/* ==========================================================================*/

#if (CHIP_REV == S6LM) || (CHIP_REV == CV2FS) || (CHIP_REV == CV28)
#define SCALER_SYS_CNT_POST_OFFSET	0x794
#else
#define SCALER_SYS_CNT_POST_OFFSET	RCT_INVALID_OFFSET
#endif
#define SCALER_SYS_CNT_POST_REG		RCT_REG(SCALER_SYS_CNT_POST_OFFSET)

/* ==========================================================================*/

/* Secure and Scratchpad */
#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || \
	(CHIP_REV == S5) || (CHIP_REV == S5L)
#define AHB_SCRATCHPAD_OFFSET		0x1B000
#elif (CHIP_REV == CV1) || (CHIP_REV == CV2)
#define AHB_SCRATCHPAD_OFFSET		0x1000
#else
#define AHB_SCRATCHPAD_OFFSET		0x22000
#endif
#define AHB_SCRATCHPAD_BASE		(AHB_BASE + AHB_SCRATCHPAD_OFFSET)
#define AHB_SCRATCHPAD_REG(x)		(AHB_SCRATCHPAD_BASE + (x))

#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || (CHIP_REV == S5) ||  \
	(CHIP_REV == S5L) || (CHIP_REV == CV1) || (CHIP_REV == CV2)
#define AHBSP_CTL_OFFSET		0x0C
#define AHBSP_USB_SIDEBAND_OFFSET	0x04
#else
#define AHBSP_CTL_OFFSET		0x60
#define AHBSP_USB_SIDEBAND_OFFSET	0x94
#endif
#define AHBSP_CTL_REG			AHB_SCRATCHPAD_REG(AHBSP_CTL_OFFSET)
#define AHBSP_USB_SIDEBAND_REG		AHB_SCRATCHPAD_REG(AHBSP_USB_SIDEBAND_OFFSET)

#if (CHIP_REV == CV2)
#define AHBSP_GMII_DATA_OFFSET		0x6c
#define AHBSP_GMII_ADDR_OFFSET		0x70
#else
#define AHBSP_GMII_DATA_OFFSET		0xA0
#define AHBSP_GMII_ADDR_OFFSET		0xA4
#endif

#if (CHIP_REV == CV2FS)
#define AHB_SP0_RAM_OFFSET		0x30000
#define AHB_SP1_RAM_OFFSET		0x31000
#else
#define AHB_SP0_RAM_OFFSET		0x20000
#define AHB_SP1_RAM_OFFSET		0x21000
#endif
#define AHB_SP0_RAM_BASE		(AHB_BASE + AHB_SP0_RAM_OFFSET)
#define AHB_SP1_RAM_BASE		(AHB_BASE + AHB_SP1_RAM_OFFSET)

/* ==========================================================================*/

#define	POC_ETH_IS_ENABLED		0x00000001
#define	POC_USB0_IS_DEVICE		0x20000000

#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L)
#define	POC_GCLK_CORE_DIV2_MASK		0x00000000
#elif (CHIP_REV == S5) || (CHIP_REV == CV1)
#define	POC_GCLK_CORE_DIV2_MASK		0x00800000
#elif (CHIP_REV == S5L)
#define	POC_GCLK_CORE_DIV2_MASK		0x00100000
#else
#define	POC_GCLK_CORE_DIV2_MASK		0x00000200
#endif

#if (CHIP_REV == S5L)
#define POC_ORC_CLK_MODE		0x40000000
#else
#define POC_ORC_CLK_MODE		0x00000000
#endif

#if (CHIP_REV == S3) || (CHIP_REV == S5) || (CHIP_REV == CV1)
#define POC_BOOT_FROM_MASK		0x00000070
#define POC_BOOT_FROM_BYPASS		0x00000100
#define POC_BOOT_FROM_USB		0x00000400
#define POC_BOOT_FROM_SPINOR		0x00000000
#define POC_BOOT_FROM_NAND		0x00000010
#define POC_BOOT_FROM_EMMC		0x00000020
#define POC_BOOT_FROM_SPI		0x00000030
#define POC_BOOT_FROM_HIF		0x00000040
#else
#define POC_BOOT_FROM_MASK		0x00000030
#define POC_BOOT_FROM_BYPASS		0x00000100
#define POC_BOOT_FROM_USB		0x00000400
#define POC_BOOT_FROM_SPINOR		0x00000000
#define POC_BOOT_FROM_NAND		0x00000010
#define POC_BOOT_FROM_EMMC		0x00000020
#define POC_BOOT_FROM_SPI		0x00000030
#define POC_BOOT_FROM_HIF		0xFFFFFFFF /* not supported */
#endif

#define RCT_BOOT_FROM_BYPASS		0x80000000
#define RCT_BOOT_FROM_USB		0x40000000
#define RCT_BOOT_FROM_NAND		0x00000001
#define RCT_BOOT_FROM_EMMC		0x00000002
#define RCT_BOOT_FROM_SPINOR		0x00000004
#define RCT_BOOT_FROM_MASK		0x0000000f
#define BOOT_MEDIA(m)			((m) & RCT_BOOT_FROM_MASK)
#define BOOT_FROM(b)			(((b) & RCT_BOOT_FROM_USB) ? RCT_BOOT_FROM_USB : \
					  BOOT_MEDIA(b))

/* ==========================================================================*/
#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || \
	(CHIP_REV == S5) || (CHIP_REV == S5L)
#define SYS_CONFIG_NAND_SPINAND		0x00000000 /* not used */
#define SYS_CONFIG_NAND_SCKMODE		0x00000000 /* not used */
#define SYS_CONFIG_NAND_4K_FIFO		0x00080000
#define SYS_CONFIG_NAND_8K_FIFO		0x00000000 /* not used */
#define SYS_CONFIG_NAND_PAGE_SIZE	0x00040000
#define SYS_CONFIG_NAND_READ_CONFIRM	0x00020000
#define SYS_CONFIG_NAND_ECC_BCH_EN	0x00010000
#define SYS_CONFIG_NAND_ECC_SPARE_2X	0x00008000
#elif (CHIP_REV == S6LM)
#define SYS_CONFIG_NAND_SPINAND		0xffffffff /* not used, spinand only */
#define SYS_CONFIG_NAND_SCKMODE		0x00080000
#define SYS_CONFIG_NAND_4K_FIFO		0xffffffff /* not used */
#define SYS_CONFIG_NAND_8K_FIFO		0x00000000 /* not used */
#define SYS_CONFIG_NAND_PAGE_SIZE	0x00040000
#define SYS_CONFIG_NAND_READ_CONFIRM	0xffffffff /* not used */
#define SYS_CONFIG_NAND_ECC_BCH_EN	0x00010000
#define SYS_CONFIG_NAND_ECC_SPARE_2X	0x00008000
#elif (CHIP_REV == CV2FS) || (CHIP_REV == CV28)
#define SYS_CONFIG_NAND_SPINAND		0xffffffff /* not used, spinand only */
#define SYS_CONFIG_NAND_SCKMODE		0x00040000
#define SYS_CONFIG_NAND_4K_FIFO		0xffffffff /* not used */
#define SYS_CONFIG_NAND_8K_FIFO		0x00100000
#define SYS_CONFIG_NAND_PAGE_SIZE	0x00020000
#define SYS_CONFIG_NAND_READ_CONFIRM	0xffffffff /* not used */
#define SYS_CONFIG_NAND_ECC_BCH_EN	0x00008000
#define SYS_CONFIG_NAND_ECC_SPARE_2X	0x00004000
#else
#define SYS_CONFIG_NAND_SPINAND		0x00400000
#define SYS_CONFIG_NAND_SCKMODE		0x00080000
#define SYS_CONFIG_NAND_4K_FIFO		0xffffffff /* not used */
#define SYS_CONFIG_NAND_8K_FIFO		0x00000000 /* not used */
#define SYS_CONFIG_NAND_PAGE_SIZE	0x00040000
#define SYS_CONFIG_NAND_READ_CONFIRM	0xffffffff /* not used */
#define SYS_CONFIG_NAND_ECC_BCH_EN	0x00010000
#define SYS_CONFIG_NAND_ECC_SPARE_2X	0x00008000
#endif

/* these definition are used by software */
#define RCT_BOOT_NAND_AUTO		0x00000000
#define RCT_BOOT_NAND_PAGE_SIZE		0x00000001
#define RCT_BOOT_NAND_READ_CONFIRM	0x00000002
#define RCT_BOOT_NAND_ECC_BCH_EN	0x00000004
#define RCT_BOOT_NAND_ECC_SPARE_2X	0x00000008
#define RCT_BOOT_NAND_4K_BOOT		0x00000010
#define RCT_BOOT_NAND_8K_BOOT		0x00000020
#define RCT_BOOT_NAND_SPINAND		0x00000040
#define RCT_BOOT_NAND_SCKMODE		0x00000080

/* ==========================================================================*/
#if (CHIP_REV == S2L) || (CHIP_REV == S3)
#define SYS_CONFIG_MMC_HS		0x00008000
#define SYS_CONFIG_MMC_DDR		0x00004000
#define SYS_CONFIG_MMC_SDXC		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_4BIT		0x00020000
#define SYS_CONFIG_MMC_8BIT		0x00010000
#elif (CHIP_REV == S3L) || (CHIP_REV == S5L)
#define SYS_CONFIG_MMC_HS		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_DDR		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_SDXC		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_4BIT		0x00010000
#define SYS_CONFIG_MMC_8BIT		0x00008000
#elif (CHIP_REV == S5) || (CHIP_REV == CV1)
#define SYS_CONFIG_MMC_HS		0x00004000
#define SYS_CONFIG_MMC_DDR		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_SDXC		0x00020000
#define SYS_CONFIG_MMC_4BIT		0x00010000
#define SYS_CONFIG_MMC_8BIT		0x00008000
#elif (CHIP_REV == CV2FS) || (CHIP_REV == CV28)
#define SYS_CONFIG_MMC_HS		0x00002000
#define SYS_CONFIG_MMC_DDR		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_SDXC		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_4BIT		0x00008000
#define SYS_CONFIG_MMC_8BIT		0x00004000
#else
#define SYS_CONFIG_MMC_HS		0x00004000
#define SYS_CONFIG_MMC_DDR		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_SDXC		0x00000000 /* not supported */
#define SYS_CONFIG_MMC_4BIT		0x00010000
#define SYS_CONFIG_MMC_8BIT		0x00008000
#endif

/* these definition are used by software */
#define RCT_BOOT_EMMC_AUTO		0x00000000
#define RCT_BOOT_EMMC_HS		0x00000001
#define RCT_BOOT_EMMC_DDR		0x00000002
#define RCT_BOOT_EMMC_4BIT		0x00000004
#define RCT_BOOT_EMMC_8BIT		0x00000008
#define RCT_BOOT_EMMC_SDXC		0x00000010

/* ==========================================================================*/
#if (CHIP_REV == CV28)
#define MIPI_DSI_CTRL0_OFFSET		0x00000584
#define MIPI_DSI_CTRL1_OFFSET		0x00000588
#define MIPI_DSI_CTRL2_OFFSET		0x0000058c
#define MIPI_DSI_CTRL3_OFFSET		0x00000590
#define MIPI_DSI_CTRL4_OFFSET		0x00000594
#define MIPI_DSI_CTRL5_OFFSET		0x00000598
#define MIPI_DSI_AUX0_OFFSET		0x0000059c
#else
#define MIPI_DSI_CTRL0_OFFSET		0x00000670
#define MIPI_DSI_CTRL1_OFFSET		0x00000674
#define MIPI_DSI_CTRL2_OFFSET		0x00000678
#define MIPI_DSI_CTRL3_OFFSET		0x0000067C
#define MIPI_DSI_CTRL4_OFFSET		0x00000680
#define MIPI_DSI_CTRL5_OFFSET		0x00000684
#define MIPI_DSI_AUX0_OFFSET		0x0000068c
#endif

#define SCALER_CLK_VO_B_DIV_POST_OFF	0x000002ec

/* ==========================================================================*/

#define RCT_DLL0_OFFSET			0x90
#define RCT_DLL0_REG			RCT_REG(RCT_DLL0_OFFSET)
#define RCT_DLL_NEG_PUSH_LIMIT_OFFSET          0x644
#define RCT_DLL_NEG_PUSH_LIMIT_REG	RCT_REG(RCT_DLL_NEG_PUSH_LIMIT_OFFSET)

#endif /* __PLAT_AMBARELLA_RCT_H__ */

