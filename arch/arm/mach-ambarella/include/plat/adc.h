/*
 * arch/arm/plat-ambarella/include/plat/adc.h
 *
 * Author: Anthony Ginger <hfjiang@ambarella.com>
 *
 * Copyright (C) 2004-2010, Ambarella, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

#ifndef __PLAT_AMBARELLA_ADC_H__
#define __PLAT_AMBARELLA_ADC_H__

#include <linux/workqueue.h>
#include <plat/chip.h>

/* ==========================================================================*/
#if (CHIP_REV == S3) || (CHIP_REV == S5)
#define ADC_NUM_CHANNELS		5
#elif (CHIP_REV == S2L) || (CHIP_REV == S3L) || (CHIP_REV == S5L)
#define ADC_NUM_CHANNELS		4
#elif (CHIP_REV == CV1) || (CHIP_REV == CV2) || (CHIP_REV == CV22)
#define ADC_NUM_CHANNELS		3
#else
#define ADC_NUM_CHANNELS		2
#endif

#if (CHIP_REV == S2L) || (CHIP_REV == S3) || (CHIP_REV == S3L) || \
	(CHIP_REV == S5) || (CHIP_REV == S5L)
#define ADC_OFFSET			0x1D000
#else
#define ADC_OFFSET			0x3000
#endif

#define ADC_BASE			(APB_BASE + ADC_OFFSET)
#define ADC_REG(x)			(ADC_BASE + (x))

/* ==========================================================================*/

#if (CHIP_REV == S3)
#define ADC_PERIOD_CYCLE		5
#elif (CHIP_REV == S2L) || (CHIP_REV == S3L)
#define ADC_PERIOD_CYCLE		6
#else
#define ADC_PERIOD_CYCLE		20
#endif

#define ADC_MAX_CLOCK			12000000
#define ADC_MAX_FIFO_DEPTH		1024

/* ==========================================================================*/
#define ADC_STATUS_OFFSET		0x000
#define ADC_CONTROL_OFFSET		0x004
#define ADC_COUNTER_OFFSET		0x008
#define ADC_SLOT_NUM_OFFSET		0x00c
#define ADC_SLOT_PERIOD_OFFSET		0x010
#define ADC_CTRL_INTR_TABLE_OFFSET	0x044
#define ADC_DATA_INTR_TABLE_OFFSET	0x048
#define ADC_FIFO_INTR_TABLE_OFFSET	0x04c
#define ADC_ERR_STATUS_OFFSET		0x050

#define ADC_SLOT_CTRL_0_OFFSET		0x100
#define ADC_SLOT_CTRL_1_OFFSET		0x104
#define ADC_SLOT_CTRL_2_OFFSET		0x108
#define ADC_SLOT_CTRL_3_OFFSET		0x10c
#define ADC_SLOT_CTRL_4_OFFSET		0x110
#define ADC_SLOT_CTRL_5_OFFSET		0x114
#define ADC_SLOT_CTRL_6_OFFSET		0x118
#define ADC_SLOT_CTRL_7_OFFSET		0x11c

#define ADC_CHAN0_INTR_OFFSET		0x120
#define ADC_CHAN1_INTR_OFFSET		0x124
#define ADC_CHAN2_INTR_OFFSET		0x128
#define ADC_CHAN3_INTR_OFFSET		0x12c
/* if ADC_NUM_CHANNELS > 4 */
#define ADC_CHAN4_INTR_OFFSET		0x130
#define ADC_CHAN5_INTR_OFFSET		0x134
#define ADC_CHAN6_INTR_OFFSET		0x138
#define ADC_CHAN7_INTR_OFFSET		0x13c
/* if ADC_NUM_CHANNELS > 8 */
#define ADC_CHAN8_INTR_OFFSET		0x140
#define ADC_CHAN9_INTR_OFFSET		0x144
#define ADC_CHAN10_INTR_OFFSET		0x148
#define ADC_CHAN11_INTR_OFFSET		0x14c

#define ADC_DATA0_OFFSET		0x150
#define ADC_DATA1_OFFSET		0x154
#define ADC_DATA2_OFFSET		0x158
#define ADC_DATA3_OFFSET		0x15c
/* if ADC_NUM_CHANNELS > 4 */
#define ADC_DATA4_OFFSET		0x160
#define ADC_DATA5_OFFSET		0x164
#define ADC_DATA6_OFFSET		0x168
#define ADC_DATA7_OFFSET		0x16c
/* if ADC_NUM_CHANNELS > 8 */
#define ADC_DATA8_OFFSET		0x170
#define ADC_DATA9_OFFSET		0x174
#define ADC_DATA10_OFFSET		0x178
#define ADC_DATA11_OFFSET		0x17c

#define ADC_FIFO_CTRL_0_OFFSET		0x180
#define ADC_FIFO_CTRL_1_OFFSET		0x184
#define ADC_FIFO_CTRL_2_OFFSET		0x188
#define ADC_FIFO_CTRL_3_OFFSET		0x18C
#define ADC_FIFO_CTRL_OFFSET		0x190

#define ADC_FIFO_STATUS_0_OFFSET	0x1a0
#define ADC_FIFO_STATUS_1_OFFSET	0x1a4
#define ADC_FIFO_STATUS_2_OFFSET	0x1a8
#define ADC_FIFO_STATUS_3_OFFSET	0x1ac

#define ADC_EC_CONTROL_OFFSET		0x1B0
#define ADC_EC_COUNTER_OFFSET		0x1B4
#define ADC_EC_COUNTER_TH_OFFSET	0x1B8
#define ADC_EC_PARAM_OFFSET		0x1BC

#define ADC_EC_ADC_OFFSET		0x1C0
#define ADC_EC_REFVAL_OFFSET		0x1C4
#define ADC_EC_RESHAPE_OFFSET		0x1C8

#define ADC_FIFO_DATA0_OFFSET		0x200
#define ADC_FIFO_DATA1_OFFSET		0x280
#define ADC_FIFO_DATA2_OFFSET		0x300
#define ADC_FIFO_DATA3_OFFSET		0x380

#define ADC_STATUS_REG			ADC_REG(ADC_STATUS_OFFSET)
#define ADC_CONTROL_REG			ADC_REG(ADC_CONTROL_OFFSET)
#define ADC_COUNTER_REG			ADC_REG(ADC_COUNTER_OFFSET)
#define ADC_SLOT_NUM_REG		ADC_REG(ADC_SLOT_NUM_OFFSET)
#define ADC_SLOT_PERIOD_REG		ADC_REG(ADC_SLOT_PERIOD_OFFSET)
#define ADC_CTRL_INTR_TABLE_REG		ADC_REG(ADC_CTRL_INTR_TABLE_OFFSET)
#define ADC_DATA_INTR_TABLE_REG		ADC_REG(ADC_DATA_INTR_TABLE_OFFSET)
#define ADC_FIFO_INTR_TABLE_REG		ADC_REG(ADC_FIFO_INTR_TABLE_OFFSET)
#define ADC_ERR_STATUS_REG		ADC_REG(ADC_ERR_STATUS_OFFSET)

#define ADC_SLOT_CTRL_0_REG		ADC_REG(ADC_SLOT_CTRL_0_OFFSET)
#define ADC_SLOT_CTRL_1_REG		ADC_REG(ADC_SLOT_CTRL_1_OFFSET)
#define ADC_SLOT_CTRL_2_REG		ADC_REG(ADC_SLOT_CTRL_2_OFFSET)
#define ADC_SLOT_CTRL_3_REG		ADC_REG(ADC_SLOT_CTRL_3_OFFSET)
#define ADC_SLOT_CTRL_4_REG		ADC_REG(ADC_SLOT_CTRL_4_OFFSET)
#define ADC_SLOT_CTRL_5_REG		ADC_REG(ADC_SLOT_CTRL_5_OFFSET)
#define ADC_SLOT_CTRL_6_REG		ADC_REG(ADC_SLOT_CTRL_6_OFFSET)
#define ADC_SLOT_CTRL_7_REG		ADC_REG(ADC_SLOT_CTRL_7_OFFSET)

#define ADC_CHAN0_INTR_REG		ADC_REG(ADC_CHAN0_INTR_OFFSET)
#define ADC_CHAN1_INTR_REG		ADC_REG(ADC_CHAN1_INTR_OFFSET)
#define ADC_CHAN2_INTR_REG		ADC_REG(ADC_CHAN2_INTR_OFFSET)
#define ADC_CHAN3_INTR_REG		ADC_REG(ADC_CHAN3_INTR_OFFSET)
#define ADC_CHAN4_INTR_REG		ADC_REG(ADC_CHAN4_INTR_OFFSET)
#define ADC_CHAN5_INTR_REG		ADC_REG(ADC_CHAN5_INTR_OFFSET)
#define ADC_CHAN6_INTR_REG		ADC_REG(ADC_CHAN6_INTR_OFFSET)
#define ADC_CHAN7_INTR_REG		ADC_REG(ADC_CHAN7_INTR_OFFSET)
#define ADC_CHAN8_INTR_REG		ADC_REG(ADC_CHAN8_INTR_OFFSET)
#define ADC_CHAN9_INTR_REG		ADC_REG(ADC_CHAN9_INTR_OFFSET)
#define ADC_CHAN10_INTR_REG		ADC_REG(ADC_CHAN10_INTR_OFFSET)
#define ADC_CHAN11_INTR_REG		ADC_REG(ADC_CHAN11_INTR_OFFSET)

#define ADC_DATA0_REG			ADC_REG(ADC_DATA0_OFFSET)
#define ADC_DATA1_REG			ADC_REG(ADC_DATA1_OFFSET)
#define ADC_DATA2_REG			ADC_REG(ADC_DATA2_OFFSET)
#define ADC_DATA3_REG			ADC_REG(ADC_DATA3_OFFSET)
#define ADC_DATA4_REG			ADC_REG(ADC_DATA4_OFFSET)
#define ADC_DATA5_REG			ADC_REG(ADC_DATA5_OFFSET)
#define ADC_DATA6_REG			ADC_REG(ADC_DATA6_OFFSET)
#define ADC_DATA7_REG			ADC_REG(ADC_DATA7_OFFSET)
#define ADC_DATA8_REG			ADC_REG(ADC_DATA8_OFFSET)
#define ADC_DATA9_REG			ADC_REG(ADC_DATA9_OFFSET)
#define ADC_DATA10_REG			ADC_REG(ADC_DATA10_OFFSET)
#define ADC_DATA11_REG			ADC_REG(ADC_DATA11_OFFSET)

#define ADC_FIFO_CTRL_0_REG		ADC_REG(ADC_FIFO_CTRL_0_OFFSET)
#define ADC_FIFO_CTRL_1_REG		ADC_REG(ADC_FIFO_CTRL_1_OFFSET)
#define ADC_FIFO_CTRL_2_REG		ADC_REG(ADC_FIFO_CTRL_2_OFFSET)
#define ADC_FIFO_CTRL_3_REG		ADC_REG(ADC_FIFO_CTRL_3_OFFSET)
#define ADC_FIFO_CTRL_REG		ADC_REG(ADC_FIFO_CTRL_OFFSET)

#define ADC_FIFO_STATUS_0_REG		ADC_REG(ADC_FIFO_STATUS_0_OFFSET)
#define ADC_FIFO_STATUS_1_REG		ADC_REG(ADC_FIFO_STATUS_1_OFFSET)
#define ADC_FIFO_STATUS_2_REG		ADC_REG(ADC_FIFO_STATUS_2_OFFSET)
#define ADC_FIFO_STATUS_3_REG		ADC_REG(ADC_FIFO_STATUS_3_OFFSET)

#define ADC_EC_CONTROL_REG		ADC_REG(ADC_EC_CONTROL_OFFSET)
#define ADC_EC_CONTROL_REG		ADC_REG(ADC_EC_CONTROL_OFFSET)
#define ADC_EC_COUNTER_TH_REG		ADC_REG(ADC_EC_COUNTER_TH_OFFSET)
#define ADC_EC_PARAM_REG		ADC_REG(ADC_EC_PARAM_OFFSET)

#define ADC_EC_ADC_REG			ADC_REG(ADC_EC_ADC_OFFSET)
#define ADC_EC_REFVAL_REG		ADC_REG(ADC_EC_REFVAL_OFFSET)
#define ADC_EC_RESHAPE_REG		ADC_REG(ADC_EC_RESHAPE_OFFSET)

#define ADC_FIFO_DATA0_REG		ADC_REG(ADC_FIFO_DATA0_OFFSET)
#define ADC_FIFO_DATA1_REG		ADC_REG(ADC_FIFO_DATA1_OFFSET)
#define ADC_FIFO_DATA2_REG		ADC_REG(ADC_FIFO_DATA2_OFFSET)
#define ADC_FIFO_DATA3_REG		ADC_REG(ADC_FIFO_DATA3_OFFSET)

#define ADC_SLOT_CTRL_X_OFFSET(n)	(ADC_SLOT_CTRL_0_OFFSET + (n) * 4)
#define ADC_SLOT_CTRL_X_REG(n)		ADC_REG(ADC_SLOT_CTRL_X_OFFSET(n))

#define ADC_INT_CTRL_X_OFFSET(n)	(ADC_CHAN0_INTR_OFFSET + (n) * 4)
#define ADC_INT_CTRL_X_REG(n)		ADC_REG(ADC_INT_CTRL_X_OFFSET(n))

#define ADC_DATA_X_OFFSET(n)		(ADC_DATA0_OFFSET + (n) * 4)
#define ADC_DATA_X_REG(n)		ADC_REG(ADC_DATA_X_OFFSET(n))

#define ADC_FIFO_CTRL_X_OFFSET(n)	(ADC_FIFO_CTRL_0_OFFSET + (n) * 4)
#define ADC_FIFO_CTRL_X_REG(n)		ADC_REG(ADC_FIFO_CTRL_X_OFFSET(n))

#define ADC_FIFO_STATUS_X_OFFSET(n)	(ADC_FIFO_STATUS_0_OFFSET + (n) * 4)
#define ADC_FIFO_STATUS_X_REG(n)	ADC_REG(ADC_FIFO_STATUS_X_OFFSET(n))

#define ADC_FIFO_DATA_X_OFFSET(n)	(ADC_FIFO_DATA0_OFFSET + (n) * 0x80)
#define ADC_FIFO_DATA_X_REG(n)		ADC_REG(ADC_FIFO_DATA_X_OFFSET(n))


/* ==========================================================================*/

#define ADC_STATUS_STATUS		0x01

#define ADC_CONTROL_CLEAR		0x01
#define ADC_CONTROL_MODE		0x02
#define ADC_CONTROL_ENABLE		0x04
#define ADC_CONTROL_START		0x08

#define ADC_FIFO_OVER_INT_EN		(0x1 << 31)
#define ADC_FIFO_UNDR_INT_EN		(0x1 << 30)
#define ADC_FIFO_DEPTH			0x80
#define ADC_FIFO_TH(n)			((n) << 16)
#define ADC_FIFO_CLEAR			0x1
#define ADC_FIFO_ID(n)			((n) << 12)
#define ADC_FIFO_NUMBER		        0x04

#define ADC_INT_THRESHOLD_EN		(1 << 31)
#define ADC_VAL_HI(x)			(((x) & 0xfff) << 16)
#define ADC_VAL_LO(x)			((x) & 0xfff)

/* ==========================================================================*/

#ifndef __ASM__

#endif
/* ==========================================================================*/

#endif

