/* SPDX-License-Identifier: GPL-2.0-only */
/* Copyright (c) 2021, The Linux Foundation. All rights reserved.
 */
/*Copyright (c) 2022 Qualcomm Innovation Center, Inc. All rights reserved.*/
#ifndef	_DWMAC_QCOM_ETHQOS_H
#define	_DWMAC_QCOM_ETHQOS_H

//#include <linux/msm-bus.h>
#include <linux/ipc_logging.h>

extern void *ipc_emac_log_ctxt;

#define IPCLOG_STATE_PAGES 50
#define __FILENAME__ (strrchr(__FILE__, '/') ? \
		strrchr(__FILE__, '/') + 1 : __FILE__)

#include <linux/inetdevice.h>
#include <linux/inet.h>

#include <net/addrconf.h>
#include <net/ipv6.h>
#include <net/inet_common.h>

#include <linux/uaccess.h>

#define QCOM_ETH_QOS_MAC_ADDR_LEN 6
#define QCOM_ETH_QOS_MAC_ADDR_STR_LEN 18

#define DRV_NAME "qcom-ethqos"
#define ETHQOSDBG(fmt, args...) \
do  {\
	pr_debug(DRV_NAME " %s:%d " fmt, __func__, __LINE__, ## args);\
	if (ipc_emac_log_ctxt) { \
		ipc_log_string(ipc_emac_log_ctxt, \
		"%s: %s[%u]:[emac] debug:" fmt, __FILENAME__,\
		__func__, __LINE__, ## args); \
	} \
} while (0)

#define ETHQOSERR(fmt, args...) \
do {\
	pr_err(DRV_NAME " %s:%d " fmt, __func__, __LINE__, ## args);\
	if (ipc_emac_log_ctxt) { \
		ipc_log_string(ipc_emac_log_ctxt, \
		"%s: %s[%u]:[emac] ERROR:" fmt, __FILENAME__,\
		__func__, __LINE__, ## args); \
	} \
} while (0)

#define ETHQOSINFO(fmt, args...) \
do  {\
	pr_info(DRV_NAME " %s:%d " fmt, __func__, __LINE__, ## args);\
	if (ipc_emac_log_ctxt) { \
		ipc_log_string(ipc_emac_log_ctxt, \
		"%s: %s[%u]:[emac] INFO:" fmt, __FILENAME__,\
		__func__, __LINE__, ## args); \
	} \
} while (0)

#define RGMII_IO_MACRO_CONFIG		0x0
#define SDCC_HC_REG_DLL_CONFIG		0x4
#define SDCC_TEST_CTL			0x8
#define SDCC_HC_REG_DDR_CONFIG		0xC
#define SDCC_HC_REG_DLL_CONFIG2		0x10
#define SDC4_STATUS			0x14
#define SDCC_TEST_CTL			0x8
#define SDCC_USR_CTL			0x18
#define RGMII_IO_MACRO_CONFIG2		0x1C
#define EMAC_HW_NONE 0
#define EMAC_HW_v2_0_0 0x20000000
#define EMAC_HW_v2_1_0 0x20010000
#define EMAC_HW_v2_1_1 0x20010001
#define EMAC_HW_v2_1_2 0x20010002
#define EMAC_HW_v2_2_0 0x20020000
#define EMAC_HW_v2_3_0 0x20030000
#define EMAC_HW_v2_3_1 0x20030001
#define EMAC_HW_v2_3_2 0x20030002
#define EMAC_HW_v3_0_0_RG 0x30000000
#define EMAC_HW_vMAX 9

#define ETHQOS_CONFIG_PPSOUT_CMD 44
#define ETHQOS_AVB_ALGORITHM 27

#define MAC_PPS_CONTROL			0x00000b70
#define PPS_MAXIDX(x)			((((x) + 1) * 8) - 1)
#define PPS_MINIDX(x)			((x) * 8)
#define MCGRENX(x)			BIT(PPS_MAXIDX(x))
#define PPSEN0				BIT(4)
#define MAC_PPSX_TARGET_TIME_SEC(x)	(0x00000b80 + ((x) * 0x10))
#define MAC_PPSX_TARGET_TIME_NSEC(x)	(0x00000b84 + ((x) * 0x10))
#define TRGTBUSY0			BIT(31)
#define TTSL0				GENMASK(30, 0)
#define MAC_PPSX_INTERVAL(x)		(0x00000b88 + ((x) * 0x10))
#define MAC_PPSX_WIDTH(x)		(0x00000b8c + ((x) * 0x10))

#define PPS_START_DELAY 100000000
#define ONE_NS 1000000000
#define PPS_ADJUST_NS 32

#define DWC_ETH_QOS_PPS_CH_0 0
#define DWC_ETH_QOS_PPS_CH_1 1
#define DWC_ETH_QOS_PPS_CH_2 2
#define DWC_ETH_QOS_PPS_CH_3 3

#define AVB_CLASS_A_POLL_DEV_NODE "avb_class_a_intr"

#define AVB_CLASS_B_POLL_DEV_NODE "avb_class_b_intr"

#define AVB_CLASS_A_CHANNEL_NUM 2
#define AVB_CLASS_B_CHANNEL_NUM 3

#define VOTE_IDX_0MBPS 0
#define VOTE_IDX_10MBPS 1
#define VOTE_IDX_100MBPS 2
#define VOTE_IDX_1000MBPS 3
#define RGMII_IO_MACRO_DEBUG1		0x20
#define EMAC_SYSTEM_LOW_POWER_DEBUG	0x28

/* RGMII_IO_MACRO_CONFIG fields */
#define RGMII_CONFIG_FUNC_CLK_EN		BIT(30)
#define RGMII_CONFIG_POS_NEG_DATA_SEL		BIT(23)
#define RGMII_CONFIG_GPIO_CFG_RX_INT		GENMASK(21, 20)
#define RGMII_CONFIG_GPIO_CFG_TX_INT		GENMASK(19, 17)
#define RGMII_CONFIG_MAX_SPD_PRG_9		GENMASK(16, 8)
#define RGMII_CONFIG_MAX_SPD_PRG_2		GENMASK(7, 6)
#define RGMII_CONFIG_INTF_SEL			GENMASK(5, 4)
#define RGMII_CONFIG_BYPASS_TX_ID_EN		BIT(3)
#define RGMII_CONFIG_LOOPBACK_EN		BIT(2)
#define RGMII_CONFIG_PROG_SWAP			BIT(1)
#define RGMII_CONFIG_DDR_MODE			BIT(0)

/*RGMII DLL CONFIG*/
#define HSR_DLL_CONFIG					0x000B642C
#define HSR_DLL_CONFIG_2					0xA001
#define HSR_MACRO_CONFIG_2					0x01
#define HSR_DLL_TEST_CTRL					0x1400000
#define HSR_DDR_CONFIG					0x80040868
#define HSR_SDCC_USR_CTRL					0x2C010800
#define MACRO_CONFIG_2_MASK				GENMASK(24, 17)
#define	DLL_CONFIG_2_MASK				GENMASK(22, 0)
#define HSR_SDCC_DLL_TEST_CTRL				0x1800000
#define DDR_CONFIG_PRG_RCLK_DLY			        115
#define DLL_BYPASS					BIT(30)

/* SDCC_HC_REG_DLL_CONFIG fields */
#define SDCC_DLL_CONFIG_DLL_RST			BIT(30)
#define SDCC_DLL_CONFIG_PDN			BIT(29)
#define SDCC_DLL_CONFIG_MCLK_FREQ		GENMASK(26, 24)
#define SDCC_DLL_CONFIG_CDR_SELEXT		GENMASK(23, 20)
#define SDCC_DLL_CONFIG_CDR_EXT_EN		BIT(19)
#define SDCC_DLL_CONFIG_CK_OUT_EN		BIT(18)
#define SDCC_DLL_CONFIG_CDR_EN			BIT(17)
#define SDCC_DLL_CONFIG_DLL_EN			BIT(16)
#define SDCC_DLL_MCLK_GATING_EN			BIT(5)
#define SDCC_DLL_CDR_FINE_PHASE			GENMASK(3, 2)

/* SDCC_HC_REG_DDR_CONFIG fields */
#define SDCC_DDR_CONFIG_PRG_DLY_EN		BIT(31)
#define SDCC_DDR_CONFIG_EXT_PRG_RCLK_DLY	GENMASK(26, 21)
#define SDCC_DDR_CONFIG_EXT_PRG_RCLK_DLY_CODE	GENMASK(29, 27)
#define SDCC_DDR_CONFIG_EXT_PRG_RCLK_DLY_EN	BIT(30)
#define SDCC_DDR_CONFIG_PRG_RCLK_DLY		GENMASK(8, 0)
#define SDCC_DDR_CONFIG_TCXO_CYCLES_DLY_LINE    GENMASK(20, 12)
#define SDCC_DDR_CONFIG_TCXO_CYCLES_CNT		GENMASK(11, 9)

/* SDCC_HC_REG_DLL_CONFIG2 fields */
#define SDCC_DLL_CONFIG2_DLL_CLOCK_DIS		BIT(21)
#define SDCC_DLL_CONFIG2_MCLK_FREQ_CALC		GENMASK(17, 10)
#define SDCC_DLL_CONFIG2_DDR_TRAFFIC_INIT_SEL	GENMASK(3, 2)
#define SDCC_DLL_CONFIG2_DDR_TRAFFIC_INIT_SW	BIT(1)
#define SDCC_DLL_CONFIG2_DDR_CAL_EN		BIT(0)

/* SDC4_STATUS bits */
#define SDC4_STATUS_DLL_LOCK			BIT(7)

/* RGMII_IO_MACRO_CONFIG2 fields */
#define RGMII_CONFIG2_RSVD_CONFIG15		GENMASK(31, 17)
#define RGMII_CONFIG2_RGMII_CLK_SEL_CFG		BIT(16)
#define RGMII_CONFIG2_TX_TO_RX_LOOPBACK_EN	BIT(13)
#define RGMII_CONFIG2_CLK_DIVIDE_SEL		BIT(12)
#define RGMII_CONFIG2_RX_PROG_SWAP		BIT(7)
#define RGMII_CONFIG2_DATA_DIVIDE_CLK_SEL	BIT(6)
#define RGMII_CONFIG2_TX_CLK_PHASE_SHIFT_EN	BIT(5)

#define EMAC_I0_EMAC_CORE_HW_VERSION_RGOFFADDR 0x00000070
#define EMAC_HW_v2_3_2_RG 0x20030002

#define MII_BUSY 0x00000001
#define MII_WRITE 0x00000002

/* GMAC4 defines */
#define MII_GMAC4_GOC_SHIFT		2
#define MII_GMAC4_READ			(3 << MII_GMAC4_GOC_SHIFT)

#define MII_BUSY 0x00000001
#define MII_WRITE 0x00000002

#define DWC_ETH_QOS_PHY_INTR_STATUS     0x0013

#define LINK_UP 1
#define LINK_DOWN 0

#define LINK_DOWN_STATE 0x800
#define LINK_UP_STATE 0x400

#define ATH8031_PHY_ID 0x004dd074
#define ATH8035_PHY_ID 0x004dd072
#define QCA8337_PHY_ID 0x004dd036
#define ATH8030_PHY_ID 0x004dd076
#define MICREL_PHY_ID PHY_ID_KSZ9031
#define DWC_ETH_QOS_MICREL_PHY_INTCS 0x1b
#define DWC_ETH_QOS_MICREL_PHY_CTL 0x1f
#define DWC_ETH_QOS_MICREL_INTR_LEVEL 0x4000
#define DWC_ETH_QOS_BASIC_STATUS     0x0001
#define LINK_STATE_MASK 0x4
#define AUTONEG_STATE_MASK 0x20
#define MICREL_LINK_UP_INTR_STATUS BIT(0)

//Mac config
#define MAC_CONFIGURATION 0x0
#define MAC_LM BIT(12)

#define EMAC_QUEUE_0 0
#define EMAC_CHANNEL_0 0
#define EMAC_CHANNEL_1 1

#define TLMM_BASE_RGMII_CTRL1 (tlmm_rgmii_pull_ctl1_base)
#define TLMM_BASE_RX_CTR (tlmm_rgmii_rx_ctr_base)

#define TLMM_RGMII_HDRV_PULL_CTL1_ADDRESS_OFFSET\
	(((ethqos->emac_ver == EMAC_HW_v2_3_2) ? 0xA7000\
	 : (ethqos->emac_ver == EMAC_HW_v2_0_0) ? 0xA5000\
	 : (ethqos->emac_ver == EMAC_HW_v2_2_0) ? 0xA5000\
	 : 0))

#define TLMM_RGMII_HDRV_PULL_CTL1_ADDRESS\
	(((unsigned long *)\
		(TLMM_BASE_RGMII_CTRL1)))

#define TLMM_RGMII_HDRV_PULL_CTL1_RGWR(data)\
	iowrite32(data,	(void __iomem *)TLMM_RGMII_HDRV_PULL_CTL1_ADDRESS)

#define TLMM_RGMII_HDRV_PULL_CTL1_RGRD(data)\
	((data) = ioread32((void __iomem *)TLMM_RGMII_HDRV_PULL_CTL1_ADDRESS))

#define TLMM_RGMII_HDRV_PULL_CTL1_HDRV_MASK (unsigned long)(0x7)

#define TLMM_RGMII_HDRV_PULL_CTL1_CK_TX_HDRV_WR_MASK_15\
	(unsigned long)(0xFFFC7FFF)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_3_HDRV_WR_MASK_12\
	(unsigned long)(0xFFFF8FFF)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_2_HDRV_WR_MASK_9\
	(unsigned long)(0xFFFFF1FF)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_1_HDRV_WR_MASK_6\
	(unsigned long)(0xFFFFFE3F)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_0_HDRV_WR_MASK_3\
	(unsigned long)(0xFFFFFFC7)
#define TLMM_RGMII_HDRV_PULL_CTL1_CTL_TX_HDRV_WR_MASK_0\
	(unsigned long)(0xFFFFFFF8)

#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_2MA (unsigned long)(0x0)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_4MA (unsigned long)(0x1)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_6MA (unsigned long)(0x2)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_8MA (unsigned long)(0x3)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_10MA (unsigned long)(0x4)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_12MA (unsigned long)(0x5)
#define TLMM_RGMII_HDRV_PL_CTL1_TX_HDRV_14MA (unsigned long)(0x6)
#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_16MA (unsigned long)(0x7)

#define TLMM_RGMII_HDRV_PULL_CTL1_TX_HDRV_WR(clk, data, ctl) do {\
		unsigned long v;\
		unsigned long drv = data;\
		TLMM_RGMII_HDRV_PULL_CTL1_RGRD(v);\
		v = (v & (TLMM_RGMII_HDRV_PULL_CTL1_CK_TX_HDRV_WR_MASK_15))\
		 | (((clk) & (TLMM_RGMII_HDRV_PULL_CTL1_HDRV_MASK)) << 15);\
		v = (v & (TLMM_RGMII_HDRV_PULL_CTL1_TX_3_HDRV_WR_MASK_12))\
		 | (((drv) & (TLMM_RGMII_HDRV_PULL_CTL1_HDRV_MASK)) << 12);\
		v = (v & (TLMM_RGMII_HDRV_PULL_CTL1_TX_2_HDRV_WR_MASK_9))\
		 | (((drv) & (TLMM_RGMII_HDRV_PULL_CTL1_HDRV_MASK)) << 9);\
		v = (v & (TLMM_RGMII_HDRV_PULL_CTL1_TX_1_HDRV_WR_MASK_6))\
		 | (((drv) & (TLMM_RGMII_HDRV_PULL_CTL1_HDRV_MASK)) << 6);\
		v = (v & (TLMM_RGMII_HDRV_PULL_CTL1_TX_0_HDRV_WR_MASK_3))\
		 | (((drv) & (TLMM_RGMII_HDRV_PULL_CTL1_HDRV_MASK)) << 3);\
		v = (v & (TLMM_RGMII_HDRV_PULL_CTL1_CTL_TX_HDRV_WR_MASK_0))\
		 | (((ctl) & (TLMM_RGMII_HDRV_PULL_CTL1_HDRV_MASK)) << 0);\
		TLMM_RGMII_HDRV_PULL_CTL1_RGWR(v);\
} while (0)

#define TLMM_RGMII_RX_HV_MODE_CTL_ADDRESS_OFFSET \
	(((ethqos->emac_ver == EMAC_HW_v2_3_2) ? 0xA7004\
	  : (ethqos->emac_ver == EMAC_HW_v2_0_0) ? 0xA5004\
	  : (ethqos->emac_ver == EMAC_HW_v2_2_0) ? 0xA5004\
	  : 0))

#define TLMM_RGMII_RX_HV_MODE_CTL_ADDRESS\
	((unsigned long *)\
	 (TLMM_BASE_RX_CTR))\

#define TLMM_RGMII_RX_HV_MODE_CTL_RGWR(data)\
	(iowrite32(data, (void __iomem *)TLMM_RGMII_RX_HV_MODE_CTL_ADDRESS))

#define TLMM_RGMII_RX_HV_MODE_CTL_RGRD(data)\
	((data) = ioread32((void __iomem *)TLMM_RGMII_RX_HV_MODE_CTL_ADDRESS))

#define QSERDES_QMP_PLL	0x0
#define QSERDES_COM_ATB_SEL1	(QSERDES_QMP_PLL + 0x0)
#define QSERDES_COM_ATB_SEL2	(QSERDES_QMP_PLL + 0x4)
#define QSERDES_COM_BG_TIMER	(QSERDES_QMP_PLL + 0xC)
#define QSERDES_COM_BIAS_EN_CLKBUFLR_EN	(QSERDES_QMP_PLL + 0x44)
#define QSERDES_COM_BIAS_EN_CTRL_BY_PSM	(QSERDES_QMP_PLL + 0x90)
#define QSERDES_COM_BIN_VCOCAL_CMP_CODE1_MODE0	(QSERDES_QMP_PLL + 0x1AC)
#define QSERDES_COM_BIN_VCOCAL_CMP_CODE1_MODE1	(QSERDES_QMP_PLL + 0x1B4)
#define QSERDES_COM_BIN_VCOCAL_CMP_CODE2_MODE0	(QSERDES_QMP_PLL + 0x1B0)
#define QSERDES_COM_BIN_VCOCAL_CMP_CODE2_MODE1	(QSERDES_QMP_PLL + 0x1B8)
#define QSERDES_COM_BIN_VCOCAL_HSCLK_SEL	(QSERDES_QMP_PLL + 0x1BC)
#define QSERDES_COM_C_READY_STATUS	(QSERDES_QMP_PLL + 0x178)
#define QSERDES_COM_CLK_ENABLE1	(QSERDES_QMP_PLL + 0x48)
#define QSERDES_COM_CLK_EP_DIV_MODE0	(QSERDES_QMP_PLL + 0x6C)
#define QSERDES_COM_CLK_EP_DIV_MODE1	(QSERDES_QMP_PLL + 0x70)
#define QSERDES_COM_CLK_SELECT	(QSERDES_QMP_PLL + 0x154)
#define QSERDES_COM_CML_SYSCLK_SEL	(QSERDES_QMP_PLL + 0x98)
#define QSERDES_COM_CMN_CONFIG	(QSERDES_QMP_PLL + 0x17C)
#define QSERDES_COM_CMN_IETRIM	(QSERDES_QMP_PLL + 0x5C)
#define QSERDES_COM_CMN_IPTRIM	(QSERDES_QMP_PLL + 0x60)
#define QSERDES_COM_CMN_MISC1	(QSERDES_QMP_PLL + 0x19C)
#define QSERDES_COM_CMN_MODE	(QSERDES_QMP_PLL + 0x1A0)
#define QSERDES_COM_CMN_MODE_CONTD	(QSERDES_QMP_PLL + 0x1A4)
#define QSERDES_COM_CMN_RATE_OVERRIDE	(QSERDES_QMP_PLL + 0x180)
#define QSERDES_COM_CMN_STATUS	(QSERDES_QMP_PLL + 0x140)
#define QSERDES_COM_CORE_CLK_EN	(QSERDES_QMP_PLL + 0x174)
#define QSERDES_COM_CORECLK_DIV_MODE0	(QSERDES_QMP_PLL + 0x168)
#define QSERDES_COM_CORECLK_DIV_MODE1	(QSERDES_QMP_PLL + 0x16C)
#define QSERDES_COM_CP_CTRL_MODE0	(QSERDES_QMP_PLL + 0x74)
#define QSERDES_COM_CP_CTRL_MODE1	(QSERDES_QMP_PLL + 0x78)
#define QSERDES_COM_DEBUG_BUS0	(QSERDES_QMP_PLL + 0x188)
#define QSERDES_COM_DEBUG_BUS1	(QSERDES_QMP_PLL + 0x18C)
#define QSERDES_COM_DEBUG_BUS2	(QSERDES_QMP_PLL + 0x190)
#define QSERDES_COM_DEBUG_BUS3	(QSERDES_QMP_PLL + 0x194)
#define QSERDES_COM_DEBUG_BUS_SEL	(QSERDES_QMP_PLL + 0x198)
#define QSERDES_COM_DEC_START_MODE0	(QSERDES_QMP_PLL + 0xBC)
#define QSERDES_COM_DEC_START_MODE1	(QSERDES_QMP_PLL + 0xC4)
#define QSERDES_COM_DEC_START_MSB_MODE0	(QSERDES_QMP_PLL + 0xC0)
#define QSERDES_COM_DEC_START_MSB_MODE1	(QSERDES_QMP_PLL + 0xC8)
#define QSERDES_COM_DIV_FRAC_START1_MODE0	(QSERDES_QMP_PLL + 0xCC)
#define QSERDES_COM_DIV_FRAC_START1_MODE1	(QSERDES_QMP_PLL + 0xD8)
#define QSERDES_COM_DIV_FRAC_START2_MODE0	(QSERDES_QMP_PLL + 0xD0)
#define QSERDES_COM_DIV_FRAC_START2_MODE1	(QSERDES_QMP_PLL + 0xDC)
#define QSERDES_COM_DIV_FRAC_START3_MODE0	(QSERDES_QMP_PLL + 0xD4)
#define QSERDES_COM_DIV_FRAC_START3_MODE1	(QSERDES_QMP_PLL + 0xE0)
#define QSERDES_COM_EP_CLOCK_DETECT_CTRL	(QSERDES_QMP_PLL + 0x64)
#define QSERDES_COM_FREQ_UPDATE	(QSERDES_QMP_PLL + 0x8)
#define QSERDES_COM_HSCLK_HS_SWITCH_SEL	(QSERDES_QMP_PLL + 0x15C)
#define QSERDES_COM_HSCLK_SEL	(QSERDES_QMP_PLL + 0x158)
#define QSERDES_COM_INTEGLOOP_BINCODE_STATUS	(QSERDES_QMP_PLL + 0x160)
#define QSERDES_COM_INTEGLOOP_EN	(QSERDES_QMP_PLL + 0xE8)
#define QSERDES_COM_INTEGLOOP_GAIN0_MODE0	(QSERDES_QMP_PLL + 0xEC)
#define QSERDES_COM_INTEGLOOP_GAIN0_MODE1	(QSERDES_QMP_PLL + 0xF4)
#define QSERDES_COM_INTEGLOOP_GAIN1_MODE0	(QSERDES_QMP_PLL + 0xF0)
#define QSERDES_COM_INTEGLOOP_GAIN1_MODE1	(QSERDES_QMP_PLL + 0xF8)
#define QSERDES_COM_INTEGLOOP_INITVAL	(QSERDES_QMP_PLL + 0xE4)
#define QSERDES_COM_INTEGLOOP_P_PATH_GAIN0	(QSERDES_QMP_PLL + 0xFC)
#define QSERDES_COM_INTEGLOOP_P_PATH_GAIN1	(QSERDES_QMP_PLL + 0x100)
#define QSERDES_COM_LOCK_CMP1_MODE0	(QSERDES_QMP_PLL + 0xAC)
#define QSERDES_COM_LOCK_CMP1_MODE1	(QSERDES_QMP_PLL + 0xB4)
#define QSERDES_COM_LOCK_CMP2_MODE0	(QSERDES_QMP_PLL + 0xB0)
#define QSERDES_COM_LOCK_CMP2_MODE1	(QSERDES_QMP_PLL + 0xB8)
#define QSERDES_COM_LOCK_CMP_CFG	(QSERDES_QMP_PLL + 0xA8)
#define QSERDES_COM_LOCK_CMP_EN	(QSERDES_QMP_PLL + 0xA4)
#define QSERDES_COM_MODE_OPERATION_STATUS	(QSERDES_QMP_PLL + 0x1C4)
#define QSERDES_COM_PLL_ANALOG	(QSERDES_QMP_PLL + 0x164)
#define QSERDES_COM_PLL_CCTRL_MODE0	(QSERDES_QMP_PLL + 0x84)
#define QSERDES_COM_PLL_CCTRL_MODE1	(QSERDES_QMP_PLL + 0x88)
#define QSERDES_COM_PLL_CNTRL	(QSERDES_QMP_PLL + 0x8C)
#define QSERDES_COM_PLL_EN	(QSERDES_QMP_PLL + 0x54)
#define QSERDES_COM_PLL_IVCO	(QSERDES_QMP_PLL + 0x58)
#define QSERDES_COM_PLL_RCTRL_MODE0	(QSERDES_QMP_PLL + 0x7C)
#define QSERDES_COM_PLL_RCTRL_MODE1	(QSERDES_QMP_PLL + 0x80)
#define QSERDES_COM_PLLCAL_CODE1_STATUS	(QSERDES_QMP_PLL + 0x14C)
#define QSERDES_COM_PLLCAL_CODE2_STATUS	(QSERDES_QMP_PLL + 0x150)
#define QSERDES_COM_POST_DIV	(QSERDES_QMP_PLL + 0x3C)
#define QSERDES_COM_POST_DIV_MUX	(QSERDES_QMP_PLL + 0x40)
#define QSERDES_COM_RESERVED_1	(QSERDES_QMP_PLL + 0x1C0)
#define QSERDES_COM_RESET_SM_STATUS	(QSERDES_QMP_PLL + 0x144)
#define QSERDES_COM_RESETSM_CNTRL	(QSERDES_QMP_PLL + 0x9C)
#define QSERDES_COM_RESETSM_CNTRL2	(QSERDES_QMP_PLL + 0xA0)
#define QSERDES_COM_RESTRIM_CODE_STATUS	(QSERDES_QMP_PLL + 0x148)
#define QSERDES_COM_SSC_ADJ_PER1	(QSERDES_QMP_PLL + 0x14)
#define QSERDES_COM_SSC_ADJ_PER2	(QSERDES_QMP_PLL + 0x18)
#define QSERDES_COM_SSC_EN_CENTER	(QSERDES_QMP_PLL + 0x10)
#define QSERDES_COM_SSC_PER1	(QSERDES_QMP_PLL + 0x1C)
#define QSERDES_COM_SSC_PER2	(QSERDES_QMP_PLL + 0x20)
#define QSERDES_COM_SSC_STEP_SIZE1_MODE0	(QSERDES_QMP_PLL + 0x24)
#define QSERDES_COM_SSC_STEP_SIZE1_MODE1	(QSERDES_QMP_PLL + 0x30)
#define QSERDES_COM_SSC_STEP_SIZE2_MODE0	(QSERDES_QMP_PLL + 0x28)
#define QSERDES_COM_SSC_STEP_SIZE2_MODE1	(QSERDES_QMP_PLL + 0x34)
#define QSERDES_COM_SSC_STEP_SIZE3_MODE0	(QSERDES_QMP_PLL + 0x2C)
#define QSERDES_COM_SSC_STEP_SIZE3_MODE1	(QSERDES_QMP_PLL + 0x38)
#define QSERDES_COM_SVS_MODE_CLK_SEL	(QSERDES_QMP_PLL + 0x184)
#define QSERDES_COM_SW_RESET	(QSERDES_QMP_PLL + 0x170)
#define QSERDES_COM_SYS_CLK_CTRL	(QSERDES_QMP_PLL + 0x4C)
#define QSERDES_COM_SYSCLK_BUF_ENABLE	(QSERDES_QMP_PLL + 0x50)
#define QSERDES_COM_SYSCLK_DET_COMP_STATUS	(QSERDES_QMP_PLL + 0x68)
#define QSERDES_COM_SYSCLK_EN_SEL	(QSERDES_QMP_PLL + 0x94)
#define QSERDES_COM_VCO_DC_LEVEL_CTRL	(QSERDES_QMP_PLL + 0x1A8)
#define QSERDES_COM_VCO_TUNE1_MODE0	(QSERDES_QMP_PLL + 0x110)
#define QSERDES_COM_VCO_TUNE1_MODE1	(QSERDES_QMP_PLL + 0x118)
#define QSERDES_COM_VCO_TUNE2_MODE0	(QSERDES_QMP_PLL + 0x114)
#define QSERDES_COM_VCO_TUNE2_MODE1	(QSERDES_QMP_PLL + 0x11C)
#define QSERDES_COM_VCO_TUNE_CTRL	(QSERDES_QMP_PLL + 0x108)
#define QSERDES_COM_VCO_TUNE_INITVAL1	(QSERDES_QMP_PLL + 0x120)
#define QSERDES_COM_VCO_TUNE_INITVAL2	(QSERDES_QMP_PLL + 0x124)
#define QSERDES_COM_VCO_TUNE_MAP	(QSERDES_QMP_PLL + 0x10C)
#define QSERDES_COM_VCO_TUNE_MAXVAL1	(QSERDES_QMP_PLL + 0x130)
#define QSERDES_COM_VCO_TUNE_MAXVAL2	(QSERDES_QMP_PLL + 0x134)
#define QSERDES_COM_VCO_TUNE_MINVAL1	(QSERDES_QMP_PLL + 0x128)
#define QSERDES_COM_VCO_TUNE_MINVAL2	(QSERDES_QMP_PLL + 0x12C)
#define QSERDES_COM_VCO_TUNE_TIMER1	(QSERDES_QMP_PLL + 0x138)
#define QSERDES_COM_VCO_TUNE_TIMER2	(QSERDES_QMP_PLL + 0x13C)
#define QSERDES_COM_VCOCAL_DEADMAN_CTRL	(QSERDES_QMP_PLL + 0x104)

#define QSERDES_RX	0x600
#define QSERDES_RX_UCDR_FO_GAIN_HALF	(QSERDES_RX + 0x0)
#define QSERDES_RX_UCDR_FO_GAIN_QUARTER	(QSERDES_RX + 0x4)
#define QSERDES_RX_UCDR_FO_GAIN	(QSERDES_RX + 0x8)
#define QSERDES_RX_UCDR_SO_GAIN_HALF	(QSERDES_RX + 0xC)
#define QSERDES_RX_UCDR_SO_GAIN_QUARTER	(QSERDES_RX + 0x10)
#define QSERDES_RX_UCDR_SO_GAIN	(QSERDES_RX + 0x14)
#define QSERDES_RX_UCDR_SVS_FO_GAIN_HALF	(QSERDES_RX + 0x18)
#define QSERDES_RX_UCDR_SVS_FO_GAIN_QUARTER	(QSERDES_RX + 0x1C)
#define QSERDES_RX_UCDR_SVS_FO_GAIN	(QSERDES_RX + 0x20)
#define QSERDES_RX_UCDR_SVS_SO_GAIN_HALF	(QSERDES_RX + 0x24)
#define QSERDES_RX_UCDR_SVS_SO_GAIN_QUARTER	(QSERDES_RX + 0x28)
#define QSERDES_RX_UCDR_SVS_SO_GAIN	(QSERDES_RX + 0x2C)
#define QSERDES_RX_UCDR_FASTLOCK_FO_GAIN	(QSERDES_RX + 0x30)
#define QSERDES_RX_UCDR_SO_SATURATION_AND_ENABLE	(QSERDES_RX + 0x34)
#define QSERDES_RX_UCDR_FO_TO_SO_DELAY	(QSERDES_RX + 0x38)
#define QSERDES_RX_UCDR_FASTLOCK_COUNT_LOW	(QSERDES_RX + 0x3C)
#define QSERDES_RX_UCDR_FASTLOCK_COUNT_HIGH	(QSERDES_RX + 0x40)
#define QSERDES_RX_UCDR_PI_CONTROLS	(QSERDES_RX + 0x44)
#define QSERDES_RX_UCDR_PI_CTRL2	(QSERDES_RX + 0x48)
#define QSERDES_RX_UCDR_SB2_THRESH1	(QSERDES_RX + 0x4C)
#define QSERDES_RX_UCDR_SB2_THRESH2	(QSERDES_RX + 0x50)
#define QSERDES_RX_UCDR_SB2_GAIN1	(QSERDES_RX + 0x54)
#define QSERDES_RX_UCDR_SB2_GAIN2	(QSERDES_RX + 0x58)
#define QSERDES_RX_AUX_CONTROL	(QSERDES_RX + 0x5C)
#define QSERDES_RX_AUX_DATA_TCOARSE_TFINE	(QSERDES_RX + 0x60)
#define QSERDES_RX_RCLK_AUXDATA_SEL	(QSERDES_RX + 0x64)
#define QSERDES_RX_AC_JTAG_ENABLE	(QSERDES_RX + 0x68)
#define QSERDES_RX_AC_JTAG_INITP	(QSERDES_RX + 0x6C)
#define QSERDES_RX_AC_JTAG_INITN	(QSERDES_RX + 0x70)
#define QSERDES_RX_AC_JTAG_LVL	(QSERDES_RX + 0x74)
#define QSERDES_RX_AC_JTAG_MODE	(QSERDES_RX + 0x78)
#define QSERDES_RX_AC_JTAG_RESET	(QSERDES_RX + 0x7C)
#define QSERDES_RX_RX_TERM_BW	(QSERDES_RX + 0x80)
#define QSERDES_RX_RX_RCVR_IQ_EN	(QSERDES_RX + 0x84)
#define QSERDES_RX_RX_IDAC_I_DC_OFFSETS	(QSERDES_RX + 0x88)
#define QSERDES_RX_RX_IDAC_IBAR_DC_OFFSETS	(QSERDES_RX + 0x8C)
#define QSERDES_RX_RX_IDAC_Q_DC_OFFSETS	(QSERDES_RX + 0x90)
#define QSERDES_RX_RX_IDAC_QBAR_DC_OFFSETS	(QSERDES_RX + 0x94)
#define QSERDES_RX_RX_IDAC_A_DC_OFFSETS	(QSERDES_RX + 0x98)
#define QSERDES_RX_RX_IDAC_ABAR_DC_OFFSETS	(QSERDES_RX + 0x9C)
#define QSERDES_RX_RX_IDAC_EN	(QSERDES_RX + 0xA0)
#define QSERDES_RX_RX_IDAC_ENABLES	(QSERDES_RX + 0xA4)
#define QSERDES_RX_RX_IDAC_SIGN	(QSERDES_RX + 0xA8)
#define QSERDES_RX_RX_HIGHZ_HIGHRATE	(QSERDES_RX + 0xAC)
#define QSERDES_RX_RX_TERM_AC_BYPASS_DC_COUPLE_OFFSET	(QSERDES_RX + 0xB0)
#define QSERDES_RX_DFE_1	(QSERDES_RX + 0xB4)
#define QSERDES_RX_DFE_2	(QSERDES_RX + 0xB8)
#define QSERDES_RX_DFE_3	(QSERDES_RX + 0xBC)
#define QSERDES_RX_DFE_4	(QSERDES_RX + 0xC0)
#define QSERDES_RX_TX_ADAPT_PRE_THRESH1	(QSERDES_RX + 0xC4)
#define QSERDES_RX_TX_ADAPT_PRE_THRESH2	(QSERDES_RX + 0xC8)
#define QSERDES_RX_TX_ADAPT_POST_THRESH	(QSERDES_RX + 0xCC)
#define QSERDES_RX_TX_ADAPT_MAIN_THRESH	(QSERDES_RX + 0xD0)
#define QSERDES_RX_VGA_CAL_CNTRL1	(QSERDES_RX + 0xD4)
#define QSERDES_RX_VGA_CAL_CNTRL2	(QSERDES_RX + 0xD8)
#define QSERDES_RX_GM_CAL	(QSERDES_RX + 0xDC)
#define QSERDES_RX_RX_VGA_GAIN2_LSB	(QSERDES_RX + 0xE0)
#define QSERDES_RX_RX_VGA_GAIN2_MSB	(QSERDES_RX + 0xE4)
#define QSERDES_RX_RX_EQU_ADAPTOR_CNTRL1	(QSERDES_RX + 0xE8)
#define QSERDES_RX_RX_EQU_ADAPTOR_CNTRL2	(QSERDES_RX + 0xEC)
#define QSERDES_RX_RX_EQU_ADAPTOR_CNTRL3	(QSERDES_RX + 0xF0)
#define QSERDES_RX_RX_EQU_ADAPTOR_CNTRL4	(QSERDES_RX + 0xF4)
#define QSERDES_RX_RX_IDAC_TSETTLE_LOW	(QSERDES_RX + 0xF8)
#define QSERDES_RX_RX_IDAC_TSETTLE_HIGH	(QSERDES_RX + 0xFC)
#define QSERDES_RX_RX_IDAC_MEASURE_TIME	(QSERDES_RX + 0x100)
#define QSERDES_RX_RX_IDAC_ACCUMULATOR	(QSERDES_RX + 0x104)
#define QSERDES_RX_RX_EQ_OFFSET_LSB	(QSERDES_RX + 0x108)
#define QSERDES_RX_RX_EQ_OFFSET_MSB	(QSERDES_RX + 0x10C)
#define QSERDES_RX_RX_EQ_OFFSET_ADAPTOR_CNTRL1	(QSERDES_RX + 0x110)
#define QSERDES_RX_RX_OFFSET_ADAPTOR_CNTRL2	(QSERDES_RX + 0x114)
#define QSERDES_RX_SIGDET_ENABLES	(QSERDES_RX + 0x118)
#define QSERDES_RX_SIGDET_CNTRL	(QSERDES_RX + 0x11C)
#define QSERDES_RX_SIGDET_LVL	(QSERDES_RX + 0x120)
#define QSERDES_RX_SIGDET_DEGLITCH_CNTRL	(QSERDES_RX + 0x124)
#define QSERDES_RX_RX_BAND	(QSERDES_RX + 0x128)
#define QSERDES_RX_CDR_FREEZE_UP_DN	(QSERDES_RX + 0x12C)
#define QSERDES_RX_CDR_RESET_OVERRIDE	(QSERDES_RX + 0x130)
#define QSERDES_RX_RX_INTERFACE_MODE	(QSERDES_RX + 0x134)
#define QSERDES_RX_JITTER_GEN_MODE	(QSERDES_RX + 0x138)
#define QSERDES_RX_SJ_AMP1	(QSERDES_RX + 0x13C)
#define QSERDES_RX_SJ_AMP2	(QSERDES_RX + 0x140)
#define QSERDES_RX_SJ_PER1	(QSERDES_RX + 0x144)
#define QSERDES_RX_SJ_PER2	(QSERDES_RX + 0x148)
#define QSERDES_RX_PPM_OFFSET1	(QSERDES_RX + 0x14C)
#define QSERDES_RX_PPM_OFFSET2	(QSERDES_RX + 0x150)
#define QSERDES_RX_SIGN_PPM_PERIOD1	(QSERDES_RX + 0x154)
#define QSERDES_RX_SIGN_PPM_PERIOD2	(QSERDES_RX + 0x158)
#define QSERDES_RX_RX_MODE_00_LOW	(QSERDES_RX + 0x15C)
#define QSERDES_RX_RX_MODE_00_HIGH	(QSERDES_RX + 0x160)
#define QSERDES_RX_RX_MODE_00_HIGH2	(QSERDES_RX + 0x164)
#define QSERDES_RX_RX_MODE_00_HIGH3	(QSERDES_RX + 0x168)
#define QSERDES_RX_RX_MODE_00_HIGH4	(QSERDES_RX + 0x16C)
#define QSERDES_RX_RX_MODE_01_LOW	(QSERDES_RX + 0x170)
#define QSERDES_RX_RX_MODE_01_HIGH	(QSERDES_RX + 0x174)
#define QSERDES_RX_RX_MODE_01_HIGH2	(QSERDES_RX + 0x178)
#define QSERDES_RX_RX_MODE_01_HIGH3	(QSERDES_RX + 0x17C)
#define QSERDES_RX_RX_MODE_01_HIGH4	(QSERDES_RX + 0x180)
#define QSERDES_RX_RX_MODE_10_LOW	(QSERDES_RX + 0x184)
#define QSERDES_RX_RX_MODE_10_HIGH	(QSERDES_RX + 0x188)
#define QSERDES_RX_RX_MODE_10_HIGH2	(QSERDES_RX + 0x18C)
#define QSERDES_RX_RX_MODE_10_HIGH3	(QSERDES_RX + 0x190)
#define QSERDES_RX_RX_MODE_10_HIGH4	(QSERDES_RX + 0x194)
#define QSERDES_RX_PHPRE_CTRL	(QSERDES_RX + 0x198)
#define QSERDES_RX_PHPRE_INITVAL	(QSERDES_RX + 0x19C)
#define QSERDES_RX_DFE_EN_TIMER	(QSERDES_RX + 0x1A0)
#define QSERDES_RX_DFE_CTLE_POST_CAL_OFFSET	(QSERDES_RX + 0x1A4)
#define QSERDES_RX_DCC_CTRL1	(QSERDES_RX + 0x1A8)
#define QSERDES_RX_DCC_CTRL2	(QSERDES_RX + 0x1AC)
#define QSERDES_RX_VTH_CODE	(QSERDES_RX + 0x1B0)
#define QSERDES_RX_VTH_MIN_THRESH	(QSERDES_RX + 0x1B4)
#define QSERDES_RX_VTH_MAX_THRESH	(QSERDES_RX + 0x1B8)
#define QSERDES_RX_ALOG_OBSV_BUS_CTRL_1	(QSERDES_RX + 0x1BC)
#define QSERDES_RX_PI_CTRL1	(QSERDES_RX + 0x1C0)
#define QSERDES_RX_PI_CTRL2	(QSERDES_RX + 0x1C4)
#define QSERDES_RX_PI_QUAD	(QSERDES_RX + 0x1C8)
#define QSERDES_RX_IDATA1	(QSERDES_RX + 0x1CC)
#define QSERDES_RX_IDATA2	(QSERDES_RX + 0x1D0)
#define QSERDES_RX_AUX_DATA1	(QSERDES_RX + 0x1D4)
#define QSERDES_RX_AUX_DATA2	(QSERDES_RX + 0x1D8)
#define QSERDES_RX_AC_JTAG_OUTP	(QSERDES_RX + 0x1DC)
#define QSERDES_RX_AC_JTAG_OUTN	(QSERDES_RX + 0x1E0)
#define QSERDES_RX_RX_SIGDET	(QSERDES_RX + 0x1E4)
#define QSERDES_RX_ALOG_OBSV_BUS_STATUS_1	(QSERDES_RX + 0x1E8)

#define QSERDES_TX	0x400
#define QSERDES_TX_BIST_MODE_LANENO	(QSERDES_TX + 0x0)
#define QSERDES_TX_BIST_INVERT	(QSERDES_TX + 0x4)
#define QSERDES_TX_CLKBUF_ENABLE	(QSERDES_TX + 0x8)
#define QSERDES_TX_TX_EMP_POST1_LVL	(QSERDES_TX + 0xC)
#define QSERDES_TX_TX_IDLE_LVL_LARGE_AMP	(QSERDES_TX + 0x10)
#define QSERDES_TX_TX_DRV_LVL	(QSERDES_TX + 0x14)
#define QSERDES_TX_TX_DRV_LVL_OFFSET	(QSERDES_TX + 0x18)
#define QSERDES_TX_RESET_TSYNC_EN	(QSERDES_TX + 0x1C)
#define QSERDES_TX_PRE_STALL_LDO_BOOST_EN	(QSERDES_TX + 0x20)
#define QSERDES_TX_TX_BAND	(QSERDES_TX + 0x24)
#define QSERDES_TX_SLEW_CNTL	(QSERDES_TX + 0x28)
#define QSERDES_TX_INTERFACE_SELECT	(QSERDES_TX + 0x2C)
#define QSERDES_TX_LPB_EN	(QSERDES_TX + 0x30)
#define QSERDES_TX_RES_CODE_LANE_TX	(QSERDES_TX + 0x34)
#define QSERDES_TX_RES_CODE_LANE_RX	(QSERDES_TX + 0x38)
#define QSERDES_TX_RES_CODE_LANE_OFFSET_TX	(QSERDES_TX + 0x3C)
#define QSERDES_TX_RES_CODE_LANE_OFFSET_RX	(QSERDES_TX + 0x40)
#define QSERDES_TX_PERL_LENGTH1	(QSERDES_TX + 0x44)
#define QSERDES_TX_PERL_LENGTH2	(QSERDES_TX + 0x48)
#define QSERDES_TX_SERDES_BYP_EN_OUT	(QSERDES_TX + 0x4C)
#define QSERDES_TX_DEBUG_BUS_SEL	(QSERDES_TX + 0x50)
#define QSERDES_TX_TRANSCEIVER_BIAS_EN	(QSERDES_TX + 0x54)
#define QSERDES_TX_HIGHZ_DRVR_EN	(QSERDES_TX + 0x58)
#define QSERDES_TX_TX_POL_INV	(QSERDES_TX + 0x5C)
#define QSERDES_TX_PARRATE_REC_DETECT_IDLE_EN	(QSERDES_TX + 0x60)
#define QSERDES_TX_BIST_PATTERN1	(QSERDES_TX + 0x64)
#define QSERDES_TX_BIST_PATTERN2	(QSERDES_TX + 0x68)
#define QSERDES_TX_BIST_PATTERN3	(QSERDES_TX + 0x6C)
#define QSERDES_TX_BIST_PATTERN4	(QSERDES_TX + 0x70)
#define QSERDES_TX_BIST_PATTERN5	(QSERDES_TX + 0x74)
#define QSERDES_TX_BIST_PATTERN6	(QSERDES_TX + 0x78)
#define QSERDES_TX_BIST_PATTERN7	(QSERDES_TX + 0x7C)
#define QSERDES_TX_BIST_PATTERN8	(QSERDES_TX + 0x80)
#define QSERDES_TX_LANE_MODE_1	(QSERDES_TX + 0x84)
#define QSERDES_TX_LANE_MODE_2	(QSERDES_TX + 0x88)
#define QSERDES_TX_LANE_MODE_3	(QSERDES_TX + 0x8C)
#define QSERDES_TX_LANE_MODE_4	(QSERDES_TX + 0x90)
#define QSERDES_TX_LANE_MODE_5	(QSERDES_TX + 0x94)
#define QSERDES_TX_ATB_SEL1	(QSERDES_TX + 0x98)
#define QSERDES_TX_ATB_SEL2	(QSERDES_TX + 0x9C)
#define QSERDES_TX_RCV_DETECT_LVL	(QSERDES_TX + 0xA0)
#define QSERDES_TX_RCV_DETECT_LVL_2	(QSERDES_TX + 0xA4)
#define QSERDES_TX_PRBS_SEED1	(QSERDES_TX + 0xA8)
#define QSERDES_TX_PRBS_SEED2	(QSERDES_TX + 0xAC)
#define QSERDES_TX_PRBS_SEED3	(QSERDES_TX + 0xB0)
#define QSERDES_TX_PRBS_SEED4	(QSERDES_TX + 0xB4)
#define QSERDES_TX_RESET_GEN	(QSERDES_TX + 0xB8)
#define QSERDES_TX_RESET_GEN_MUXES	(QSERDES_TX + 0xBC)
#define QSERDES_TX_TRAN_DRVR_EMP_EN	(QSERDES_TX + 0xC0)
#define QSERDES_TX_TX_INTERFACE_MODE	(QSERDES_TX + 0xC4)
#define QSERDES_TX_VMODE_CTRL1	(QSERDES_TX + 0xC8)
#define QSERDES_TX_ALOG_OBSV_BUS_CTRL_1	(QSERDES_TX + 0xCC)
#define QSERDES_TX_BIST_STATUS	(QSERDES_TX + 0xD0)
#define QSERDES_TX_BIST_ERROR_COUNT1	(QSERDES_TX + 0xD4)
#define QSERDES_TX_BIST_ERROR_COUNT2	(QSERDES_TX + 0xD8)
#define QSERDES_TX_ALOG_OBSV_BUS_STATUS_1	(QSERDES_TX + 0xDC)
#define QSERDES_TX_LANE_DIG_CONFIG	(QSERDES_TX + 0xE0)
#define QSERDES_TX_PI_QEC_CTRL	(QSERDES_TX + 0xE4)
#define QSERDES_TX_PRE_EMPH	(QSERDES_TX + 0xE8)
#define QSERDES_TX_SW_RESET	(QSERDES_TX + 0xEC)
#define QSERDES_TX_DCC_OFFSET	(QSERDES_TX + 0xF0)
#define QSERDES_TX_DCC_CMUX_POSTCAL_OFFSET	(QSERDES_TX + 0xF4)
#define QSERDES_TX_DCC_CMUX_CAL_CTRL1	(QSERDES_TX + 0xF8)
#define QSERDES_TX_DCC_CMUX_CAL_CTRL2	(QSERDES_TX + 0xFC)
#define QSERDES_TX_DIG_BKUP_CTRL	(QSERDES_TX + 0x100)
#define QSERDES_TX_DEBUG_BUS0	(QSERDES_TX + 0x104)
#define QSERDES_TX_DEBUG_BUS1	(QSERDES_TX + 0x108)
#define QSERDES_TX_DEBUG_BUS2	(QSERDES_TX + 0x10C)
#define QSERDES_TX_DEBUG_BUS3	(QSERDES_TX + 0x110)
#define QSERDES_TX_READ_EQCODE	(QSERDES_TX + 0x114)
#define QSERDES_TX_READ_OFFSETCODE	(QSERDES_TX + 0x118)
#define QSERDES_TX_IA_ERROR_COUNTER_LOW	(QSERDES_TX + 0x11C)
#define QSERDES_TX_IA_ERROR_COUNTER_HIGH	(QSERDES_TX + 0x120)
#define QSERDES_TX_VGA_READ_CODE	(QSERDES_TX + 0x124)
#define QSERDES_TX_VTH_READ_CODE	(QSERDES_TX + 0x128)
#define QSERDES_TX_DFE_TAP1_READ_CODE	(QSERDES_TX + 0x12C)
#define QSERDES_TX_DFE_TAP2_READ_CODE	(QSERDES_TX + 0x130)
#define QSERDES_TX_IDAC_STATUS_I	(QSERDES_TX + 0x134)
#define QSERDES_TX_IDAC_STATUS_IBAR	(QSERDES_TX + 0x138)
#define QSERDES_TX_IDAC_STATUS_Q	(QSERDES_TX + 0x13C)
#define QSERDES_TX_IDAC_STATUS_QBAR	(QSERDES_TX + 0x140)
#define QSERDES_TX_IDAC_STATUS_A	(QSERDES_TX + 0x144)
#define QSERDES_TX_IDAC_STATUS_ABAR	(QSERDES_TX + 0x148)
#define QSERDES_TX_IDAC_STATUS_SM_ON	(QSERDES_TX + 0x14C)
#define QSERDES_TX_IDAC_STATUS_CAL_DONE	(QSERDES_TX + 0x150)
#define QSERDES_TX_IDAC_STATUS_SIGNERROR	(QSERDES_TX + 0x154)
#define QSERDES_TX_DCC_CAL_STATUS	(QSERDES_TX + 0x158)
#define QSERDES_TX_DCC_READ_CODE_STATUS	(QSERDES_TX + 0x15C)

#define QSERDES_PCS	0xC00
#define QSERDES_PCS_PHY_START (QSERDES_PCS + 0x0)
#define QSERDES_PCS_POWER_DOWN_CONTROL (QSERDES_PCS + 0x4)
#define QSERDES_PCS_SW_RESET (QSERDES_PCS + 0x8)
#define QSERDES_PCS_LINE_RESET_TIME (QSERDES_PCS + 0xC)
#define QSERDES_PCS_PCS_CTRL1 (QSERDES_PCS + 0x10)
#define QSERDES_PCS_TSYNC_RSYNC_CNTL (QSERDES_PCS + 0x14)
#define QSERDES_PCS_RETIME_BUFFER_EN (QSERDES_PCS + 0x18)
#define QSERDES_PCS_PLL_CNTL (QSERDES_PCS + 0x1C)
#define QSERDES_PCS_TX_LARGE_AMP_DRV_LVL (QSERDES_PCS + 0x20)
#define QSERDES_PCS_TX_LARGE_AMP_POST_EMP_LVL (QSERDES_PCS + 0x24)
#define QSERDES_PCS_TX_SMALL_AMP_DRV_LVL (QSERDES_PCS + 0x28)
#define QSERDES_PCS_TX_SMALL_AMP_POST_EMP_LVL (QSERDES_PCS + 0x2C)
#define QSERDES_PCS_RX_SYNC_WAIT_TIME (QSERDES_PCS + 0x30)
#define QSERDES_PCS_L0_BIST_CTRL (QSERDES_PCS + 0x34)
#define QSERDES_PCS_MISC_BIST_CTRL (QSERDES_PCS + 0x38)
#define QSERDES_PCS_BIST_PRBS_POLY0 (QSERDES_PCS + 0x3C)
#define QSERDES_PCS_BIST_PRBS_POLY1 (QSERDES_PCS + 0x40)
#define QSERDES_PCS_BIST_PRBS_SEED0 (QSERDES_PCS + 0x44)
#define QSERDES_PCS_BIST_PRBS_SEED1 (QSERDES_PCS + 0x48)
#define QSERDES_PCS_BIST_PRBS_SEED2 (QSERDES_PCS + 0x4C)
#define QSERDES_PCS_BIST_NUM_IPG (QSERDES_PCS + 0x50)
#define QSERDES_PCS_RX_HS_EQUALIZER_SETTING_CAPABILITY (QSERDES_PCS + 0x54)
#define QSERDES_PCS_RX_HS_ADAPT_LENGTH_REFRESH_CAPABILITY (QSERDES_PCS + 0x58)
#define QSERDES_PCS_RX_HS_ADAPT_LENGTH_INITIAL_CAPABILITY (QSERDES_PCS + 0x5C)
#define QSERDES_PCS_DEBUG_BUS_CLKSEL (QSERDES_PCS + 0x60)
#define QSERDES_PCS_DEBUG_BUS_0_CTRL (QSERDES_PCS + 0x64)
#define QSERDES_PCS_DEBUG_BUS_1_CTRL (QSERDES_PCS + 0x68)
#define QSERDES_PCS_DEBUG_BUS_2_CTRL (QSERDES_PCS + 0x6C)
#define QSERDES_PCS_DEBUG_BUS_3_CTRL (QSERDES_PCS + 0x70)
#define QSERDES_PCS_DEBUG_BUS_0_STATUS_CHK (QSERDES_PCS + 0x74)
#define QSERDES_PCS_DEBUG_BUS_1_STATUS_CHK (QSERDES_PCS + 0x78)
#define QSERDES_PCS_DEBUG_BUS_2_STATUS_CHK (QSERDES_PCS + 0x7C)
#define QSERDES_PCS_DEBUG_BUS_3_STATUS_CHK (QSERDES_PCS + 0x80)
#define QSERDES_PCS_RX_MIN_HIBERN8_TIME (QSERDES_PCS + 0x84)
#define QSERDES_PCS_RX_SIGDET_CTRL1 (QSERDES_PCS + 0x88)
#define QSERDES_PCS_RX_SIGDET_CTRL2 (QSERDES_PCS + 0x8C)
#define QSERDES_PCS_TCLK_SYM_CNTR_INITVAL (QSERDES_PCS + 0x90)
#define QSERDES_PCS_PCS_READY_STATUS (QSERDES_PCS + 0x94)
#define QSERDES_PCS_PCS_MISC_STATUS (QSERDES_PCS + 0x98)
#define QSERDES_PCS_L0_BIST_CHK_ERR_CNT_L_STATUS (QSERDES_PCS + 0x9C)
#define QSERDES_PCS_L0_BIST_CHK_ERR_CNT_H_STATUS (QSERDES_PCS + 0xA0)
#define QSERDES_PCS_L0_BIST_CHK_STATUS (QSERDES_PCS + 0xA4)
#define QSERDES_PCS_DEBUG_BUS_0_STATUS (QSERDES_PCS + 0xA8)
#define QSERDES_PCS_DEBUG_BUS_1_STATUS (QSERDES_PCS + 0xAC)
#define QSERDES_PCS_DEBUG_BUS_2_STATUS (QSERDES_PCS + 0xB0)
#define QSERDES_PCS_DEBUG_BUS_3_STATUS (QSERDES_PCS + 0xB4)
#define QSERDES_PCS_REVISION_ID0 (QSERDES_PCS + 0xB8)
#define QSERDES_PCS_REVISION_ID1 (QSERDES_PCS + 0xBC)
#define QSERDES_PCS_REVISION_ID2 (QSERDES_PCS + 0xC0)
#define QSERDES_PCS_REVISION_ID3 (QSERDES_PCS + 0xC4)
#define QSERDES_PCS_SYSCLK_EN_COUNT_CTRL (QSERDES_PCS + 0xC8)
#define QSERDES_PCS_PLL_SHUTDOWN_CTRL (QSERDES_PCS + 0xCC)
#define QSERDES_PCS_TIMER_20US_CORECLK_STEPS_MSB (QSERDES_PCS + 0xD0)
#define QSERDES_PCS_TIMER_20US_CORECLK_STEPS_LSB (QSERDES_PCS + 0xD4)
#define QSERDES_PCS_TX_MID_TERM_CTRL1 (QSERDES_PCS + 0xD8)
#define QSERDES_PCS_TX_MID_TERM_CTRL2 (QSERDES_PCS + 0xDC)
#define QSERDES_PCS_MULTI_LANE_CTRL1 (QSERDES_PCS + 0xE0)
#define QSERDES_PCS_L1_BIST_CTRL (QSERDES_PCS + 0xE4)
#define QSERDES_PCS_L1_BIST_CHK_ERR_CNT_L_STATUS (QSERDES_PCS + 0xE8)
#define QSERDES_PCS_L1_BIST_CHK_ERR_CNT_H_STATUS (QSERDES_PCS + 0xEC)
#define QSERDES_PCS_L1_BIST_CHK_STATUS (QSERDES_PCS + 0xF0)
#define QSERDES_PCS_STATUS_CLEAR (QSERDES_PCS + 0xF4)
#define QSERDES_PCS_RX_HSG4_SYNC_WAIT_TIME (QSERDES_PCS + 0xF8)
#define QSERDES_PCS_SGMII_MISC_CTRL1 (QSERDES_PCS + 0xFC)
#define QSERDES_PCS_SGMII_MISC_CTRL2 (QSERDES_PCS + 0x100)
#define QSERDES_PCS_SGMII_MISC_CTRL3 (QSERDES_PCS + 0x104)
#define QSERDES_PCS_SGMII_MISC_CTRL4 (QSERDES_PCS + 0x108)
#define QSERDES_PCS_SGMII_MISC_CTRL5 (QSERDES_PCS + 0x10C)
#define QSERDES_PCS_SGMII_MISC_CTRL6 (QSERDES_PCS + 0x110)
#define QSERDES_PCS_SGMII_MISC_CTRL7 (QSERDES_PCS + 0x114)
#define QSERDES_PCS_SGMII_MISC_CTRL8 (QSERDES_PCS + 0x118)
#define QSERDES_PCS_SGMII_INTERRUPT_STATUS (QSERDES_PCS + 0x11C)
#define QSERDES_PCS_SGMII_IRQ_CLEAR (QSERDES_PCS + 0x120)
#define QSERDES_PCS_SGMII_IRQ_MASK (QSERDES_PCS + 0x124)

#define QSERDES_PCS_2	0x200
#define QSERDES_PCS2_PCS_CMN_STATUS (QSERDES_PCS_2 + 0x0)
#define QSERDES_PCS2_TCLK_CTRL_STATUS (QSERDES_PCS_2 + 0x4)
#define QSERDES_PCS2_TX_LANE0_0_STATUS (QSERDES_PCS_2 + 0x8)
#define QSERDES_PCS2_TX_LANE0_1_STATUS (QSERDES_PCS_2 + 0xC)
#define QSERDES_PCS2_TX_LANE0_2_STATUS (QSERDES_PCS_2 + 0x10)
#define QSERDES_PCS2_RX_LANE0_0_STATUS (QSERDES_PCS_2 + 0x14)
#define QSERDES_PCS2_RX_LANE0_1_STATUS (QSERDES_PCS_2 + 0x18)
#define QSERDES_PCS2_RX_LANE0_3_STATUS (QSERDES_PCS_2 + 0x1C)
#define QSERDES_PCS2_TX_LANE1_0_STATUS (QSERDES_PCS_2 + 0x20)
#define QSERDES_PCS2_TX_LANE1_1_STATUS (QSERDES_PCS_2 + 0x24)
#define QSERDES_PCS2_TX_LANE1_2_STATUS (QSERDES_PCS_2 + 0x28)
#define QSERDES_PCS2_RX_LANE1_0_STATUS (QSERDES_PCS_2 + 0x2C)
#define QSERDES_PCS2_RX_LANE1_1_STATUS (QSERDES_PCS_2 + 0x30)
#define QSERDES_PCS2_RX_LANE1_3_STATUS (QSERDES_PCS_2 + 0x34)

static inline u32 PPSCMDX(u32 x, u32 val)
{
	return (GENMASK(PPS_MINIDX(x) + 3, PPS_MINIDX(x)) &
	((val) << PPS_MINIDX(x)));
}

static inline u32 TRGTMODSELX(u32 x, u32 val)
{
	return (GENMASK(PPS_MAXIDX(x) - 1, PPS_MAXIDX(x) - 2) &
	((val) << (PPS_MAXIDX(x) - 2)));
}

static inline u32 PPSX_MASK(u32 x)
{
	return GENMASK(PPS_MAXIDX(x), PPS_MINIDX(x));
}

enum current_phy_state {
	PHY_IS_ON = 0,
	PHY_IS_OFF,
};

enum IO_MACRO_PHY_MODE {
		RGMII_MODE,
		RMII_MODE,
		MII_MODE
};

enum loopback_mode {
	DISABLE_LOOPBACK = 0,
	ENABLE_IO_MACRO_LOOPBACK,
	ENABLE_MAC_LOOPBACK,
	ENABLE_PHY_LOOPBACK
};

enum phy_power_mode {
	DISABLE_PHY_IMMEDIATELY = 1,
	ENABLE_PHY_IMMEDIATELY,
	DISABLE_PHY_AT_SUSPEND_ONLY,
	DISABLE_PHY_SUSPEND_ENABLE_RESUME,
	DISABLE_PHY_ON_OFF,
};

#define RGMII_IO_BASE_ADDRESS ethqos->rgmii_base

#define RGMII_IO_MACRO_CONFIG_RGOFFADDR_OFFSET (0x00000000)

#define RGMII_IO_MACRO_CONFIG_RGWR(data)\
	writel_relaxed(data, RGMII_IO_MACRO_CONFIG_RGOFFADDR)

#define RGMII_IO_MACRO_CONFIG_RGOFFADDR \
	(RGMII_IO_BASE_ADDRESS + RGMII_IO_MACRO_CONFIG_RGOFFADDR_OFFSET)

#define RX_CONTEXT_DESC_RDES3_OWN_MLF_WR(ptr, data)\
	SET_BITS(0x1f, 0x1f, ptr, data)

#define RGMII_IO_MACRO_CONFIG_RGRD(data)\
	((data) = (readl_relaxed((RGMII_IO_MACRO_CONFIG_RGOFFADDR))))

#define RGMII_GPIO_CFG_TX_INT_MASK (unsigned long)(0x7)

#define RGMII_GPIO_CFG_TX_INT_WR_MASK (unsigned long)(0xfff1ffff)

#define RGMII_GPIO_CFG_TX_INT_UDFWR(data) do {\
	unsigned long v;\
	RGMII_IO_MACRO_CONFIG_RGRD(v);\
	v = ((v & RGMII_GPIO_CFG_TX_INT_WR_MASK) | \
	(((data) & RGMII_GPIO_CFG_TX_INT_MASK) << 17));\
	RGMII_IO_MACRO_CONFIG_RGWR(v);\
} while (0)

#define RGMII_GPIO_CFG_RX_INT_MASK (unsigned long)(0x3)

#define RGMII_GPIO_CFG_RX_INT_WR_MASK (unsigned long)(0xFFCFFFFF)

#define RGMII_GPIO_CFG_RX_INT_UDFWR(data) do {\
	unsigned long v;\
	RGMII_IO_MACRO_CONFIG_RGRD(v);\
	v = ((v & RGMII_GPIO_CFG_RX_INT_WR_MASK) | \
	(((data) & RGMII_GPIO_CFG_RX_INT_MASK) << 20));\
	RGMII_IO_MACRO_CONFIG_RGWR(v);\
} while (0)

enum CV2X_MODE {
	CV2X_MODE_DISABLE = 0x0,
	CV2X_MODE_MDM,
	CV2X_MODE_AP
};

struct ethqos_vlan_info {
	u16 vlan_id;
	u32 vlan_offset;
	u32 rx_queue;
	bool available;
};

struct ethqos_emac_por {
	unsigned int offset;
	unsigned int value;
};

struct ethqos_emac_driver_data {
	struct ethqos_emac_por *por;
	unsigned int num_por;
};

#define RGMII_TCXO_CYCLES_DLY_LINE 64
#define RGMII_TCXO_PERIOD_NS 52
#define RGMII_TCXO_CYCLES_CNT 4

#define RGMII_PRG_RCLK_CONST \
	(RGMII_TCXO_PERIOD_NS * RGMII_TCXO_CYCLES_CNT / 2)

/* register operations for EMAC_SDCC_TEST_CTL */
#define SDCC_TEST_CTL_RGOFFADDR_OFFSET (0x0000008)
/* register operations for EMAC_SDCC_USR_CTL */
#define SDCC_USR_CTL_RGOFFADDR_OFFSET (0x00000018)

struct ethqos_io_macro {
	u32 config_cdr_en;
	u32 mclk_gating_en;
	u32 cdr_fine_phase;
	u32 skip_calc_traffic;
	u32 data_divide_clk_sel;
	u32 prg_rclk_dly;
	u32 loopback_en;
	u32 rx_prog_swap;
	u32 tx_clk_phase_shift_en;
	u32 dll_clock_dis;
	u32 mclk_freq_calc;
	u32 ddr_traffic_init_sel;
	u32 ddr_traffic_init_sw;
	u32 ddr_cal_en;
	u32 tcx0_cycles_dly_line;
	u32 tcx0_cycles_cnt;
	u32 test_ctl;
	u32 usr_ctl;
	u32 pps_create;
	u32 pps_remove;
	u32 l3_master_dev;
	u32 ipv6_wq;
	u32 rgmii_tx_drv;
};

struct qcom_ethqos {
	struct platform_device *pdev;
	void __iomem *rgmii_base;
	void __iomem *ioaddr;
	void __iomem *sgmii_base;

	struct msm_bus_scale_pdata *bus_scale_vec;
	u32 bus_hdl;
	unsigned int rgmii_clk_rate;
	struct clk *rgmii_clk;
	unsigned int speed;
	unsigned int vote_idx;

	struct iommu_domain *iommu_domain;
	unsigned int *emac_reg_base_address;
	unsigned int *rgmii_reg_base_address;
	u32 emac_mem_size;

	int gpio_phy_intr_redirect;
	u32 phy_intr;
	/* Work struct for handling phy interrupt */
	struct work_struct emac_phy_work;

	struct ethqos_emac_por *por;
	unsigned int num_por;
	unsigned int emac_ver;

	struct regulator *gdsc_emac;
	struct regulator *reg_rgmii;
	struct regulator *reg_emac_phy;
	struct regulator *reg_rgmii_io_pads;

	int pps_class_a_irq;
	int pps_class_b_irq;

	struct pinctrl_state *emac_pps_0;

	/* avb_class_a dev node variables*/
	dev_t avb_class_a_dev_t;
	struct cdev *avb_class_a_cdev;
	struct class *avb_class_a_class;

	/* avb_class_b dev node variables*/
	dev_t avb_class_b_dev_t;
	struct cdev *avb_class_b_cdev;
	struct class *avb_class_b_class;

	dev_t emac_dev_t;
	struct cdev *emac_cdev;
	struct class *emac_class;

	unsigned long avb_class_a_intr_cnt;
	unsigned long avb_class_b_intr_cnt;

	/* Mac recovery dev node variables*/
	dev_t emac_rec_dev_t;
	struct cdev *emac_rec_cdev;
	struct class *emac_rec_class;

	/* saving state for Wake-on-LAN */
	int wolopts;
	/* state of enabled wol options in PHY*/
	u32 phy_wol_wolopts;
	/* state of supported wol options in PHY*/
	u32 phy_wol_supported;
	/* Boolean to check if clock is suspended*/
	int clks_suspended;
	/* Structure which holds done and wait members */
	struct completion clk_enable_done;
	/* early ethernet parameters */
	struct work_struct early_eth;
	struct delayed_work ipv4_addr_assign_wq;
	struct delayed_work ipv6_addr_assign_wq;
	bool early_eth_enabled;
	/* Key Performance Indicators */
	bool print_kpi;
	unsigned int emac_phy_off_suspend;
	int loopback_speed;
	enum phy_power_mode current_phy_mode;
	enum current_phy_state phy_state;
	/*Backup variable for phy loopback*/
	int backup_duplex;
	int backup_speed;
	u32 bmcr_backup;
	/*Backup variable for suspend resume*/
	int backup_suspend_speed;
	u32 backup_bmcr;
	unsigned backup_autoneg:1;

	struct dentry *debugfs_dir;

	struct ethqos_io_macro io_macro;
	bool phyad_change;
	bool is_gpio_phy_reset;
	u32 phyvoltage_min;
	u32 phyvoltage_max;
	struct pinctrl *pinctrl;
	struct pinctrl_state *rgmii_txc_suspend_state;
	struct pinctrl_state *rgmii_txc_resume_state;
	int always_on_phy;

	u32 emac_mem_base;
	bool ipa_enabled;

	/* Mac recovery parameters */
	int mac_err_cnt[MAC_ERR_CNT];
	bool mac_rec_en[MAC_ERR_CNT];
	bool mac_rec_fail[MAC_ERR_CNT];
	int mac_rec_cnt[MAC_ERR_CNT];
	int mac_rec_threshold[MAC_ERR_CNT];
	struct delayed_work tdu_rec;
	bool tdu_scheduled;
	int tdu_chan;

	/* QMI over ethernet parameter */
	u32 qoe_mode;
	struct ethqos_vlan_info qoe_vlan;
	u32 cv2x_mode;
	struct ethqos_vlan_info cv2x_vlan;
	unsigned char cv2x_dev_addr[ETH_ALEN];

	struct notifier_block qti_nb;
	/* SSR over ethernet parameters */
	struct work_struct eth_ssr;
	unsigned long action;
};

struct pps_cfg {
	unsigned int ptpclk_freq;
	unsigned int ppsout_freq;
	unsigned int ppsout_ch;
	unsigned int ppsout_duty;
	unsigned int ppsout_start;
	unsigned int ppsout_align;
	unsigned int ppsout_align_ns;
};

struct ifr_data_struct {
	unsigned int flags;
	unsigned int qinx; /* dma channel no to be configured */
	unsigned int cmd;
	unsigned int context_setup;
	unsigned int connected_speed;
	unsigned int rwk_filter_values[8];
	unsigned int rwk_filter_length;
	int command_error;
	int test_done;
	void *ptr;
};

struct pps_info {
	int channel_no;
};

struct ip_params {
	unsigned char mac_addr[QCOM_ETH_QOS_MAC_ADDR_LEN];
	bool is_valid_mac_addr;
	char link_speed[32];
	bool is_valid_link_speed;
	char ipv4_addr_str[32];
	struct in_addr ipv4_addr;
	bool is_valid_ipv4_addr;
	char ipv6_addr_str[48];
	struct in6_ifreq ipv6_addr;
	bool is_valid_ipv6_addr;
};

int ethqos_init_regulators(struct qcom_ethqos *ethqos);
void ethqos_disable_regulators(struct qcom_ethqos *ethqos);
int ethqos_init_gpio(struct qcom_ethqos *ethqos);
void ethqos_free_gpios(struct qcom_ethqos *ethqos);
int create_pps_interrupt_device_node(dev_t *pps_dev_t,
				     struct cdev **pps_cdev,
				     struct class **pps_class,
				     char *pps_dev_node_name);
int ethqos_remove_pps_dev(struct qcom_ethqos *ethqos);
bool qcom_ethqos_is_phy_link_up(struct qcom_ethqos *ethqos);
void *qcom_ethqos_get_priv(struct qcom_ethqos *ethqos);

int ppsout_config(struct stmmac_priv *priv, struct pps_cfg *eth_pps_cfg);

u16 dwmac_qcom_select_queue(struct net_device *dev,
			    struct sk_buff *skb,
			    struct net_device *sb_dev);

#define QTAG_VLAN_ETH_TYPE_OFFSET 16
#define QTAG_UCP_FIELD_OFFSET 14
#define QTAG_ETH_TYPE_OFFSET 12
#define PTP_UDP_EV_PORT 0x013F
#define PTP_UDP_GEN_PORT 0x0140


#define CV2X_TAG_TX_CHANNEL 3
#define QMI_TAG_TX_CHANNEL 2

#define VLAN_TAG_UCP_SHIFT 13
#define CLASS_A_TRAFFIC_UCP 3
#define CLASS_A_TRAFFIC_TX_CHANNEL 3

#define CLASS_B_TRAFFIC_UCP 2
#define CLASS_B_TRAFFIC_TX_CHANNEL 2

#define NON_TAGGED_IP_TRAFFIC_TX_CHANNEL 1
#define ALL_OTHER_TRAFFIC_TX_CHANNEL 1
#define ALL_OTHER_TX_TRAFFIC_IPA_DISABLED 0

#define DEFAULT_INT_MOD 1
#define AVB_INT_MOD 8
#define IP_PKT_INT_MOD 32
#define PTP_INT_MOD 1

#define PPS_19_2_FREQ 19200000

enum dwmac_qcom_queue_operating_mode {
	DWMAC_QCOM_QDISABLED = 0X0,
	DWMAC_QCOM_QAVB,
	DWMAC_QCOM_QDCB,
	DWMAC_QCOM_QGENERIC
};

struct dwmac_qcom_avb_algorithm_params {
	unsigned int idle_slope;
	unsigned int send_slope;
	unsigned int hi_credit;
	unsigned int low_credit;
};

struct dwmac_qcom_avb_algorithm {
	unsigned int qinx;
	unsigned int algorithm;
	unsigned int cc;
	struct dwmac_qcom_avb_algorithm_params speed100params;
	struct dwmac_qcom_avb_algorithm_params speed1000params;
	enum dwmac_qcom_queue_operating_mode op_mode;
};

void qcom_ethqos_request_phy_wol(void *plat_n);
void ethqos_reset_phy_enable_interrupt(struct qcom_ethqos *ethqos);
void  ethqos_phy_power_off(struct qcom_ethqos *ethqos);
int ethqos_phy_power_on(struct qcom_ethqos *ethqos);
inline unsigned int dwmac_qcom_get_eth_type(unsigned char *buf);
void dwmac_qcom_program_avb_algorithm(struct stmmac_priv *priv,
				      struct ifr_data_struct *req);
unsigned int dwmac_qcom_get_plat_tx_coal_frames(struct sk_buff *skb);
int ethqos_init_pps(void *priv);
struct qcom_ethqos *get_pethqos(void);
int ethqos_mdio_read(struct stmmac_priv  *priv, int phyaddr, int phyreg);
#endif
