name: qti-sa8155p-kernel
summary: Snapdragon kernel
description: This is a snapdragon snapped kernel, based off linaro kernel
grade: stable
confinement: devmode
type: kernel
adopt-info: kernel

architectures:
  - build-on: [amd64, arm64]
    build-for: arm64

build-base: core22

environment:
  LD_LIBRARY_PATH: :$SNAP/usr/lib/${CRAFT_ARCH_TRIPLET}

parts:
  kernel:
    after:
      - firmware
      - fde-hooks
    plugin: kernel
    kernel-kdefconfig:
      - snappy_defconfig
    kernel-with-firmware: false
    kernel-image-target: Image.gz
    kernel-enable-zfs-support: true
    kernel-initrd-compression: zstd
    kernel-initrd-stage-firmware: true
    kernel-initrd-modules:
      - atl1c
      - qcom-emac
      - slimbus
      - libarc4
    kernel-initrd-firmware:
      - firmware/ubuntufde*.mbn
    kernel-initrd-addons:
      - usr/bin/fde-reveal-key
      - usr/lib/${CRAFT_ARCH_TRIPLET}/libbase.so*
      - usr/lib/${CRAFT_ARCH_TRIPLET}/libdmabufheap.so*
      - usr/lib/${CRAFT_ARCH_TRIPLET}/liblog.so*
      - usr/lib/${CRAFT_ARCH_TRIPLET}/libQseeComApi.so*
      - usr/lib/${CRAFT_ARCH_TRIPLET}/libstdc*
    kernel-kconfigs:
      - CONFIG_DEBUG_INFO=n
    override-build: |
      craftctl default
      kernel_version="$(git --git-dir=${CRAFT_PROJECT_DIR}/.git describe --tags  | cut -c 12-)"
      craftctl set version=${kernel_version}-unsigned
    override-prime: |
      craftctl default
      ${CRAFT_STAGE}/trim-firmware ${CRAFT_PRIME}
      # ensure ubuntu fde TA is included
      ln -f ${CRAFT_STAGE}/firmware/ubuntufde64.mbn ${CRAFT_PRIME}/firmware/ubuntufde64.mbn
    stage:
      - config-*
      - dtbs
      - initrd.img
      - kernel.img
      - lib
      - modules
      - System.map-*
    prime:
      - -dtbs
      - -initrd.img
      - -kernel.img

  bootimg:
    plugin: nil
    after:
      - kernel
    override-build: |
      cat ${CRAFT_STAGE}/kernel.img \
          ${CRAFT_STAGE}/dtbs/qcom/sa8155p-adp.dtb \
          ${CRAFT_STAGE}/dtbs/qcom/sa8155p-iot-v2-adp.dtb \
          > Image.gz+dtbs
      mkbootimg \
        --kernel Image.gz+dtbs \
        --ramdisk ${CRAFT_STAGE}/initrd.img \
        --output ${CRAFT_PART_INSTALL}/boot.img.nonsecure \
        --pagesize 4096 \
        --base 0x80000000 \
        --kernel_offset 0x8000 \
        --ramdisk_offset 0x1000000 \
        --tags_offset 0x100 \
        --cmdline 'console=tty0 console=ttyMSM0,115200n8 clk_ignore_unused pd_ignore_unused'
    prime:
      - boot.img

  firmware:
    plugin: dump
    source: https://git.launchpad.net/~canonical-kernel-snaps/+git/kernel-snaps-uc22
    source-type: git
    source-branch: main
    stage-packages:
      - linux-firmware
      - wireless-regdb
    organize:
      lib/firmware: firmware
    prime:
      - firmware

  firmware-custom:
    after:
      - kernel
    plugin: nil
    override-pull: |
      # allow custom source definition
      if [ -n "${SNAPDRAGON_KERNEL_SNAP_FIRMWARE:-}" ]; then
        if [ -d ${SNAPDRAGON_KERNEL_SNAP_FIRMWARE} ]; then
          cp -r ${SNAPDRAGON_KERNEL_SNAP_FIRMWARE}/* ${SNAPCRAFT_PART_SRC}
        else
          git clone --depth 1 ${SNAPDRAGON_KERNEL_SNAP_FIRMWARE} ${SNAPCRAFT_PART_SRC}
        fi
      else
        echo "Missing env SNAPDRAGON_KERNEL_SNAP_FIRMWARE no custom firmware will be included"
        touch no-snapdragon-kernel-snap-firmware
      fi
    override-build: |
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/firmware/qcom/sa8155p
      cp -r * ${SNAPCRAFT_PART_INSTALL}/firmware/qcom/sa8155p

  signing-test-keys:
    plugin: dump
    source: https://git.launchpad.net/~ubuntu-cervinia/+git/cervinia-test-keys
    source-type: git
    organize:
      '*': signing-keys/
    prime:
      - -*

  sign-bootimg:
    plugin: nil
    after:
      - bootimg
      - signing-test-keys
    override-build: |
      KEY_NAME="bootimg-key"
      BOOT_IMG="boot.img"
      TARGET_SHA_TYPE=sha256
      BOARD_KERNEL_PAGESIZE=2048
      # create signature block
      openssl \
        dgst \
        -${TARGET_SHA_TYPE} \
        -binary ${CRAFT_STAGE}/${BOOT_IMG}.nonsecure \
        > ${BOOT_IMG}.${TARGET_SHA_TYPE}
      openssl \
        pkeyutl \
        -sign \
        -in ${BOOT_IMG}.${TARGET_SHA_TYPE} \
        -inkey ${CRAFT_STAGE}/signing-keys/${KEY_NAME}.key \
        -out ${BOOT_IMG}.sig \
        -pkeyopt digest:sha256 \
        -pkeyopt rsa_padding_mode:pkcs1

      # append it to the image
      dd if=/dev/zero of=${BOOT_IMG}.sig.padded bs=${BOARD_KERNEL_PAGESIZE} count=1
      dd if=${BOOT_IMG}.sig of=${BOOT_IMG}.sig.padded conv=notrunc
      cat ${CRAFT_STAGE}/${BOOT_IMG}.nonsecure ${BOOT_IMG}.sig.padded > ${CRAFT_PART_INSTALL}/${BOOT_IMG}

  # this part if optional, it enables FDE functionality
  fde-hooks:
    plugin: dump
    source: .
    source-type: local
    stage-packages:
      - libstdc++6
    override-pull: |
      # allow custom source definition
      if [ -n "${SNAPDRAGON_KERNEL_FDE_HOOK_BUNDLE:-}" ]; then
        if [ -d ${SNAPDRAGON_KERNEL_FDE_HOOK_BUNDLE} ]; then
          cp -r ${SNAPDRAGON_KERNEL_FDE_HOOK_BUNDLE}/* ${SNAPCRAFT_PART_SRC}
        else
          git clone --depth 1 ${SNAPDRAGON_KERNEL_FDE_HOOK_BUNDLE} ${SNAPCRAFT_PART_SRC}
        fi
      else
        echo "Missing env SNAPDRAGON_KERNEL_FDE_HOOK_BUNDLE, FDE functionality won't be included"
      fi
    organize:
      lib/firmware/: firmware/
      usr/bin/fde-setup: meta/hooks/fde-setup
    stage:
      # clean any test bins from reference build
      - meta/hooks/fde-setup
      - firmware
      - usr
      - -usr/bin/snapctl
      - -usr/bin/test-fde-setup-reveal
    prime:
      - firmware
      - meta/hooks/fde-setup
      - usr/lib/

build-packages:
    - android-tools-mkbootimg
    - bison
    - cpio
    - dpkg-dev
    - flex
    - libfdt-dev
    - libssl-dev
    - on amd64:
      - gcc-aarch64-linux-gnu
    - on arm64:
      - gcc
