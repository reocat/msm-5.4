name: imx-kernel
summary: i.mx linux kernel
description: The i.MX Ubuntu kernel package as a snap

grade: stable
build-base: core20
confinement: devmode
type: kernel
adopt-info: kernel

architectures:
  - build-on: amd64
    run-on: armhf, arm64
  - build-on: armhf
    run-on: armhf
  - build-on: arm64
    run-on: arm64

# environment to run fde-setup hook
environment:
    LD_LIBRARY_PATH: ${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}

hooks:
    fde-setup:
        plugs:
            - tee
            - home

parts:
    kernel:
        after:
            - optee-uc-fde-client
            - qcacld
        plugin: x-kernel
        kdefconfig: [ "snappy_defconfig" ]
        kernel-with-firmware: false
        kernel-image-target:
            arm64: Image
            armhf: zImage
        kernel-initrd-channel: beta
        kernel-initrd-compression: gz
        kernel-initrd-addons:
            - usr/bin/fde-reveal-key
            - usr/lib/*/libteec.so*
        override-build: |
            snapcraftctl build
            snapcraftctl set-version $(git --git-dir=${SNAPCRAFT_PROJECT_DIR}/.git describe --tags | cut -c 12-42)
            # build out of the tree qca9377 driver
            cp -r ${SNAPCRAFT_STAGE}/qcacld .
            cd ${SNAPCRAFT_PART_BUILD}/qcacld
            make_module() {
              ARCH=${SNAPCRAFT_TARGET_ARCH}
              [ "${SNAPCRAFT_TARGET_ARCH}" = "armhf" ] && ARCH="arm"
              make -j $(nproc) \
                 ARCH=${ARCH} CROSS_COMPILE=${SNAPCRAFT_ARCH_TRIPLET}- \
                 KERNEL_SRC=${SNAPCRAFT_PROJECT_DIR} \
                 CONFIG_CFG80211_INTERNAL_REGDB=y CONFIG_HDD_WLAN_WAIT_TIME=10000 \
                 CONFIG_LINUX_QCMBR=y CONFIG_NON_QC_PLATFORM=y CONFIG_PMF_SUPPORT=y \
                 TARGET_BUILD_VARIANT=user CONFIG_CLD_HL_SDIO_CORE=y \
                 CONFIG_FEATURE_COEX_PTA_CONFIG_ENABLE=y CONFIG_PER_VDEV_TX_DESC_POOL=1 \
                 CONFIG_QCA_LL_TX_FLOW_CT=1 CONFIG_QCA_SUPPORT_TXRX_DRIVER_TCP_DEL_ACK=y \
                 CONFIG_WLAN_FEATURE_FILS=y CONFIG_WLAN_WAPI_MODE_11AC_DISABLE=y \
                 MODNAME=qca9377 SAP_AUTH_OFFLOAD=1 \
                 KERNEL_PATH=${SNAPCRAFT_PROJECT_DIR} \
                 O=${SNAPCRAFT_PART_BUILD} \
                 KBUILD_EXTRA_SYMBOLS="" "$@"
            }
            make_module
            make_module INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH=${SNAPCRAFT_PART_INSTALL} modules_install
        organize:
            kernel.img: Image
        prime:
            - -initrd.img*
            - -Image*
            - -dtbs

    firmware:
        plugin: nil
        stage-packages:
            - linux-firmware
            - wireless-regdb
        stage:
            - -firmware/amd
            - -firmware/amdgpu
            - -firmware/asihpi
            - -firmware/cavium
            - -firmware/cxgb3
            - -firmware/cxgb4
            - -firmware/dpaa2
            - -firmware/i915
            - -firmware/intel
            - -firmware/iwlwifi-*
            - -firmware/liquidio
            - -firmware/matrox
            - -firmware/mediatek
            - -firmware/mellanox
            - -firmware/mrvl
            - -firmware/moxa
            - -firmware/netronome
            - -firmware/nvidia
            - -firmware/qed
            - -firmware/radeon
            - -firmware/rockchip
            - -firmware/ath10k/QCA9377/hw1.0/firmware-5.bin
            - -firmware/ath3k-1.fw
            - -firmware/qca/htbtfw20.tlv
            - -firmware/qcom
            - -firmware/s5p*
            - -firmware/brcm/brcmfmac43455-sdio.bin
            - -firmware/brcm/brcmfmac4356-pcie.bin
            - -usr
            - -lib
        organize:
            lib/firmware: firmware

    firmware-nxp:
        plugin: dump
        source: https://github.com/NXP/imx-firmware.git
        source-type: git
        source-tag: rel_imx_5.4.70_2.3.0
        organize:
            'cyw-wifi-bt/1CX_CYW4356/*': firmware/brcm/
            'cyw-wifi-bt/1FD_CYW4359/*': firmware/brcm/
            'cyw-wifi-bt/1MW_CYW43455/*': firmware/brcm/
            'brcm/': firmware/brcm/
            'nxp/FwImage_8997/*': firmware/nxp/
            'nxp/FwImage_8987/*': firmware/nxp/
            'nxp/wifi_mod_para.conf': firmware/nxp/
        stage:
            - firmware/brcm
            - firmware/nxp

    qcacld:
        plugin: dump
        source: https://source.codeaurora.org/external/imx/qcacld-2.0-imx
        source-type: git
        source-tag: rel_imx_5.4.70_2.3.0
        source-depth: 1
        organize:
           '*': qcacld/
        prime:
            - -*

    firmware-qca:
        plugin: nil
        override-pull: |
            wget https://www.nxp.com/lgfiles/NMG/MAD/YOCTO/firmware-qca-3.0.2.bin \
                 -O firmware-qca.bin
        override-build: |
            chmod +x firmware-qca.bin
            ./firmware-qca.bin --force --auto-accept
            cp -r firmware-*/1PJ_QCA9377-3_LEA_3.0/lib/firmware ${SNAPCRAFT_PART_INSTALL}

    optee-os:
        after:
            - optee-uc-fde
            - optee-keys
        plugin: nil
        source: https://source.codeaurora.org/external/imx/imx-optee-os.git
        source-type: git
        source-tag: rel_imx_5.4.70_2.3.2
        source-depth: 1
        override-build: |
            # depending on architecture
            # on arm64: we are building optee-os only to get build export dependency to build REE app
            # on armhf: we are building optee-os to be included in FIT image
            export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
            export CROSS_COMPILE_core="${SNAPCRAFT_ARCH_TRIPLET}-"
            export ARCH="arm"
            if [ "${SNAPCRAFT_TARGET_ARCH}" = "arm64" ]; then
                export CROSS_COMPILE_ta_arm64="${SNAPCRAFT_ARCH_TRIPLET}-"
                export CFG_ARM64_core="y"
                export PLATFORM="vexpress-qemu_armv8a"
                export CFG_USER_TA_TARGETS="ta_arm64"
            elif [ "${SNAPCRAFT_TARGET_ARCH}" = "armhf" ]; then
                export ARCH="arm"
                export CROSS_COMPILE_ta_arm32="${SNAPCRAFT_ARCH_TRIPLET}-"
                export PLATFORM="vexpress-qemu_virt"
                export CFG_USER_TA_TARGETS="ta_arm32"
                export CFG_NS_ENTRY_ADDR=0x82100000
                export CFG_PAGEABLE_ADDR=0x86800000
                export CFG_DT_ADDR=0x83000000
                # 1GB DDR
                # export CFG_DDR_SIZE=0x40000000
                # 512MB DDR
                export CFG_DDR_SIZE=0x20000000
                CFG_TEE_RAM_VA_SIZE=0x00400000
                export PLATFORM=imx
                export PLATFORM_FLAVOR=mx6sxsabreauto
                CFG_WERROR=y
                # add optee-uc-fde TA
                cp -r ${SNAPCRAFT_STAGE}/optee-uc-fde/ta/fde_key_handler ${SNAPCRAFT_PART_BUILD}/ta/
            fi
            export DEBUG=0
            export CFG_TEE_CORE_DEBUG=n
            export CFG_TEE_BENCHMARK=n
            export TA_PUBLIC_KEY="${SNAPCRAFT_STAGE}/ta-keys/ta_public.pem"
            make O=${SNAPCRAFT_PART_BUILD}/out -j$(nproc)
            if [ "${SNAPCRAFT_TARGET_ARCH}" = "armhf" ]; then
                # now build optee-os once more with added early TAs
                make O=${SNAPCRAFT_PART_BUILD}/out -j$(nproc) \
                  CFG_EARLY_TA=y \
                  EARLY_TA_PATHS="out/ta/pkcs11/fd02c9da-306c-48c7-a49c-bbd827ae86ee.stripped.elf \
                                  out/ta/fde_key_handler/fd1b2a86-3668-11eb-adc1-0242ac120002.stripped.elf"

                arm-linux-gnueabihf-objcopy \
                    -O binary out/core/tee.elf \
                    ${SNAPCRAFT_PART_INSTALL}/tee.mx6sx.bin
            fi
            cp -r ${SNAPCRAFT_PART_BUILD}/out/export-ta_arm* ${SNAPCRAFT_PART_INSTALL}/export-ta_arm
        prime:
            - -*

    optee-client:
        plugin: make
        source: https://github.com/OP-TEE/optee_client.git
        source-type: git
        source-tag: 3.17.0
        source-depth: 1
        make-parameters:
            - ARCH="${SNAPCRAFT_TARGET_ARCH}"
            - DEBUG=0
            - CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
            - CFG_TEE_CLIENT_LOAD_PATH=""
            - CFG_TA_TEST_PATH=0
            - CFG_TEE_SUPP_LOG_LEVEL=0
            - SBINDIR=/usr/sbin
            - LIBDIR=/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}
        prime:
            - usr/sbin
            - usr/lib/*/lib*so*

    optee-uc-fde:
        plugin: dump
        source: https://git.launchpad.net/~ondrak/+git/optee-uc-fde
        source-type: git
        source-branch: master
        organize:
            '*': optee-uc-fde/
        prime:
            - -*

    optee-uc-fde-client:
        after:
            - optee-uc-fde
            - optee-os
            - optee-client
        plugin: nil
        source: ${SNAPCRAFT_STAGE}/optee-uc-fde
        source-type: local
        override-build: |
            # we are not using TA build here (early TA is used), so
            # it does not matter what key is used to sign built TA
            # support cross build
            export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
            export ARCH="${SNAPCRAFT_TARGET_ARCH}"
            if [ "${SNAPCRAFT_TARGET_ARCH}" = "armhf" ]; then
                echo "Building for armhf"
                export ARCH="arm"
            fi
            export TA_DEV_KIT_DIR=${SNAPCRAFT_STAGE}/export-ta_arm
            export OPTEE_CLIENT_EXPORT=${SNAPCRAFT_STAGE}/usr
            export DESTDIR=${SNAPCRAFT_PART_INSTALL}
            make O=${SNAPCRAFT_PART_BUILD}/out
            make O=${SNAPCRAFT_PART_BUILD}/out install
        organize:
            usr/bin/fde-setup: meta/hooks/fde-setup
        stage:
            - meta/
            - usr/bin/fde-reveal-key
        prime:
            - meta/

    test-keys:
        plugin: dump
        source: https://git.launchpad.net/~ondrak/+git/dev-keys
        source-type: git
        source-branch: master
        organize:
            '*': signing-key/
        prime:
            - -*

    fit-image:
        after:
            - kernel
            - test-keys
            - optee-os
        plugin: nil
        override-build: |
            cp ${SNAPCRAFT_PROJECT_DIR}/kernel_*.its ${SNAPCRAFT_STAGE}
            # include key dir in case there are keys available
            mkimage \
                -f ${SNAPCRAFT_STAGE}/kernel_${SNAPCRAFT_TARGET_ARCH}.its \
                -r ${SNAPCRAFT_PART_INSTALL}/kernel.img \
                -k ${SNAPCRAFT_STAGE}/signing-key

build-packages:
    - bison
    - device-tree-compiler
    - dpkg-dev
    - flex
    - initramfs-tools-core
    - libfdt-dev
    - libssl-dev
    - python3-crypto
    - python3-pycryptodome
    - python3-pyelftools
    - python3-serial
    - u-boot-tools
    - wget
    - libjson-c-dev:${SNAPCRAFT_TARGET_ARCH}
    - libcryptsetup-dev:${SNAPCRAFT_TARGET_ARCH}
    - to armhf:
        - on armhf:
            - binutils
            - gcc
    - else:
        - binutils-${SNAPCRAFT_ARCH_TRIPLET}
        - gcc-${SNAPCRAFT_ARCH_TRIPLET}
