# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2021 Canonical Ltd
name: imx-kernel
summary: i.mx linux kernel
description: The i.MX Ubuntu kernel package as a snap

grade: stable
build-base: core22
confinement: devmode
type: kernel
adopt-info: kernel

architectures:
  - build-on: [amd64, arm64]
    build-for: arm64
  - build-on: [amd64, arm64, armhf]
    build-for: armhf

# environment to run fde-setup hook
environment:
  LD_LIBRARY_PATH: ${SNAP}/usr/lib/${CRAFT_ARCH_TRIPLET}

hooks:
  fde-setup:
    plugs:
      - tee
      - home

parts:
  kernel:
    after:
      - firmware
      - optee-uc-fde-client
    plugin: kernel
    kernel-kdefconfig: [ "snappy_defconfig" ]
    kernel-with-firmware: false
    kernel-image-target:
      arm64: Image
      armhf: zImage
    kernel-initrd-compression: zstd
    kernel-initrd-stage-firmware: true
    kernel-initrd-addons:
      - usr/bin/fde-reveal-key
      - usr/lib/${CRAFT_ARCH_TRIPLET}/libteec.so*
    kernel-initrd-firmware:
      - firmware/imx/sdma/sdma-imx7d.bin
      - firmware/regulatory.db
      - firmware/regulatory.db.p7s
    build-environment:
      - PATH: "/usr/lib/ccache:${PATH}"
    override-build: |
      craftctl default
      craftctl set version=$(git --git-dir=${CRAFT_PROJECT_DIR}/.git describe --tags | cut -c 12-42)
    organize:
      kernel.img: Image
    override-prime: |
      craftctl default
      # Trim firmware
      ${CRAFT_STAGE}/trim-firmware ${CRAFT_PRIME}
      # make sure we have all ath10 firmware files
      cp ${CRAFT_STAGE}/firmware/ath10k/QCA9377/hw1.0/* ${CRAFT_PRIME}/firmware/ath10k/QCA9377/hw1.0
    prime:
      - -initrd.img*
      - -Image*
      - -dtbs

  firmware:
    plugin: dump
    source: https://git.launchpad.net/~canonical-kernel-snaps/+git/kernel-snaps-uc22
    source-type: git
    source-branch: main
    stage-packages:
      - linux-firmware
      - wireless-regdb
    organize:
      lib/firmware: firmware
    stage:
      - -firmware/brcm/brcmfmac43455-sdio.bin
      - -firmware/brcm/brcmfmac43455-sdio.clm_blob
      - -firmware/brcm/brcmfmac4356-pcie.bin
      - -firmware/brcm/brcmfmac4356-pcie.clm_blob
    prime:
      - firmware

  firmware-nxp:
    after:
      - kernel
    plugin: dump
    source: https://github.com/NXP/imx-firmware.git
    source-type: git
    source-tag: lf-5.15.32_2.0.0
    organize:
      'cyw-wifi-bt/1CX_CYW4356/*': firmware/brcm/
      'cyw-wifi-bt/1FD_CYW4359/*': firmware/brcm/
      'cyw-wifi-bt/1MW_CYW43455/*': firmware/brcm/
      'brcm/': firmware/brcm/
      'nxp/FwImage_8997/*': firmware/nxp/
      'nxp/FwImage_8987/*': firmware/nxp/
      'nxp/wifi_mod_para.conf': firmware/nxp/
    stage:
      - firmware/brcm
      - firmware/nxp

  optee-os:
    after:
      - optee-uc-fde
      - optee-keys
    plugin: nil
    source: https://source.codeaurora.org/external/imx/imx-optee-os.git
    source-type: git
    source-tag: rel_imx_5.4.70_2.3.2
    source-depth: 1
    override-build: |
      # depending on architecture
      # on arm64: we are building optee-os only to get build export dependency to build REE app
      # on armhf: we are building optee-os to be included in FIT image
      export CROSS_COMPILE="${CRAFT_ARCH_TRIPLET}-"
      export CROSS_COMPILE_core="${CRAFT_ARCH_TRIPLET}-"
      export ARCH="arm"
      if [ "${CRAFT_TARGET_ARCH}" = "arm64" ]; then
        export CROSS_COMPILE_ta_arm64="${CRAFT_ARCH_TRIPLET}-"
        export CFG_ARM64_core="y"
        export PLATFORM="vexpress-qemu_armv8a"
        export CFG_USER_TA_TARGETS="ta_arm64"
      elif [ "${CRAFT_TARGET_ARCH}" = "armhf" ]; then
        export ARCH="arm"
        export CROSS_COMPILE_ta_arm32="${CRAFT_ARCH_TRIPLET}-"
        export PLATFORM="vexpress-qemu_virt"
        export CFG_USER_TA_TARGETS="ta_arm32"
        export CFG_NS_ENTRY_ADDR=0x82100000
        export CFG_PAGEABLE_ADDR=0x86800000
        export CFG_DT_ADDR=0x83000000
        # 1GB DDR
        # export CFG_DDR_SIZE=0x40000000
        # 512MB DDR
        export CFG_DDR_SIZE=0x20000000
        CFG_TEE_RAM_VA_SIZE=0x00400000
        export PLATFORM=imx
        export PLATFORM_FLAVOR=mx6sxsabreauto
        CFG_WERROR=y
        # add optee-uc-fde TA
        cp -r ${CRAFT_STAGE}/optee-uc-fde/ta/fde_key_handler ${CRAFT_PART_BUILD}/ta/
      fi
      export DEBUG=0
      export CFG_TEE_CORE_DEBUG=n
      export CFG_TEE_BENCHMARK=n
      export TA_PUBLIC_KEY="${CRAFT_STAGE}/ta-keys/ta_public.pem"
      make O=${CRAFT_PART_BUILD}/out -j$(nproc)
      if [ "${CRAFT_TARGET_ARCH}" = "armhf" ]; then
        # now build optee-os once more with added early TAs
        make O=${CRAFT_PART_BUILD}/out -j$(nproc) \
          CFG_EARLY_TA=y \
          EARLY_TA_PATHS="out/ta/pkcs11/fd02c9da-306c-48c7-a49c-bbd827ae86ee.stripped.elf \
                  out/ta/fde_key_handler/fd1b2a86-3668-11eb-adc1-0242ac120002.stripped.elf"

        cp ${CRAFT_PART_BUILD}/out/core/tee-raw.bin \
          ${CRAFT_PART_INSTALL}/tee.mx6sx.bin
      fi
      cp -r ${CRAFT_PART_BUILD}/out/export-ta_arm* ${CRAFT_PART_INSTALL}/export-ta_arm
    prime:
      - -*

  optee-client:
    plugin: nil
    source: https://github.com/OP-TEE/optee_client.git
    source-type: git
    source-tag: 3.18.0
    override-build: |
      export ARCH="${CRAFT_TARGET_ARCH}"
      if [ "${CRAFT_TARGET_ARCH}" = "armhf" ]; then
        export ARCH="arm"
      fi
      export DEBUG=0
      export CROSS_COMPILE="${CRAFT_ARCH_TRIPLET}-"
      export CFG_TEE_CLIENT_LOAD_PATH=""
      export CFG_TA_TEST_PATH=0
      export SBINDIR=/usr/sbin
      export LIBDIR=/usr/lib/${CRAFT_ARCH_TRIPLET}
      export DESTDIR=${CRAFT_PART_INSTALL}
      make O=${CRAFT_PART_BUILD}/out -j$(nproc)
      make install O=${CRAFT_PART_BUILD}/out
    prime:
      - usr/lib/*/lib*so*

  optee-uc-fde:
    plugin: dump
    source: https://git.launchpad.net/~ondrak/+git/optee-uc-fde
    source-type: git
    organize:
      '*': optee-uc-fde/
    prime:
      - -*

  optee-uc-fde-client:
    after:
      - optee-client
      - optee-os
      - optee-uc-fde
    plugin: nil
    source-type: local
    build-environment:
      - to armhf:
        - ARCH: "arm"
      - else:
        - ARCH: "${CRAFT_TARGET_ARCH}"
      - CROSS_COMPILE: "${CRAFT_ARCH_TRIPLET}-"
      # we are not using TA build here (early TA is used), so
      # it does not matter what key is used to sign built TA
      # support cross build
      - TA_DEV_KIT_DIR: "${CRAFT_STAGE}/export-ta_arm"
      - OPTEE_CLIENT_EXPORT: "${CRAFT_STAGE}/usr"
      - DESTDIR: "${CRAFT_PART_INSTALL}"
    override-build: |
      make -C ${CRAFT_STAGE}/optee-uc-fde O=${CRAFT_PART_BUILD}/out fde-key-manager fde-reveal-key fde-setup
      make -C ${CRAFT_STAGE}/optee-uc-fde O=${CRAFT_PART_BUILD}/out fde-key-manager fde-reveal-key fde-setup install
    organize:
      usr/bin/fde-setup: meta/hooks/fde-setup
    stage:
      - meta/
      - usr/bin/fde-reveal-key
    prime:
      - meta/


  fit-image:
    after:
      - kernel
      - test-keys
      - optee-os
    plugin: nil
    override-build: |
      cp ${CRAFT_PROJECT_DIR}/kernel_*.its ${CRAFT_STAGE}
      # include key dir in case there are keys available
      mkimage \
        -f ${CRAFT_STAGE}/kernel_${CRAFT_TARGET_ARCH}.its \
        -r ${CRAFT_PART_INSTALL}/kernel.img \
        -k ${CRAFT_STAGE}/signing-key

build-packages:
  - bison
  - device-tree-compiler
  - dpkg-dev
  - flex
  - libfdt-dev
  - libssl-dev
  - python3-cryptography
  - python3-pycryptodome
  - python3-pyelftools
  - python3-serial
  - u-boot-tools
  - wget
  - libjson-c-dev:${CRAFT_TARGET_ARCH}
  - libcryptsetup-dev:${CRAFT_TARGET_ARCH}
  - to armhf:
    - binutils-arm-linux-gnueabi
    - gcc-arm-linux-gnueabi
  - to arm64:
    - on amd64:
      - gcc-aarch64-linux-gnu
    - on arm64:
      - gcc
