#! /bin/sh -e
# initramfs local-premount script for encrypted /writable

PREREQ=""

# Output pre-requisites
prereqs()
{
        echo "$PREREQ"
}

case "$1" in
    prereqs)
        prereqs
        exit 0
        ;;
esac

. /scripts/functions
. /scripts/crypto-functions
. /scripts/crypto-key-functions
. /scripts/backup-restore-functions

while read opt; do
    for word in $opt; do
        case $word in
            factory-reset*)
                type=${word#factory-reset}
                factory_reset "${type}" >/dev/kmsg 2>&1 || true
                reboot -f
                ;;
            restore-serial)
                restore_serial="true"
                ;;
            backup-serial)
                backup_serial="true"
                ;;
        esac
    done
done < /proc/cmdline

# we might have 2 encrypted partitions, make sure we are fully se
cryptodisk="$(blkid -t TYPE=crypto_LUKS -o device)" >/dev/null 2>&1 || true
# we expect writable and save partitions to be encrypted, if any if missing
# re-run init step, as we have nothing to loose at this stage
dev_save="$(findfs PARTLABEL=save)" >/dev/null 2>&1 || true
dev_writable="$(findfs PARTLABEL=writable)" >/dev/null 2>&1 || true
if [ -z "$(echo ${cryptodisk} | grep "${dev_save}")" ] || [ -z "$(echo ${cryptodisk} | grep "${dev_writable}")" ]; then
  init_crypt_root >/dev/kmsg 2>&1 || true
  cryptodisk="$(blkid -t TYPE=crypto_LUKS -o device)" >/dev/null 2>&1 || true
fi

echo "Encrypted root: found rootfs on [${cryptodisk}]" | sed ':a;N;$!ba;s/\n/ /g' >/dev/kmsg || true
# we have more than one encrypted partition (writable and save)
# unlock them one by one
echo "${cryptodisk}" | while read device
do
    # determine label by partlabel
    label=$(ls -al /dev/disk/by-partlabel/ | grep "$(basename ${device})" | awk '{print $4}')
    unlock_crypt_device "${device}" "${label}" >/dev/kmsg 2>&1 || true
done
echo "Encrypted root: unlocking finished" >/dev/kmsg || true

if [ "${restore_serial}"  = "true" ]; then
    restore_serial_from_save >/dev/kmsg 2>&1 || true
fi
if [ "${backup_serial}"  = "true" ]; then
    backup_serial_to_save >/dev/kmsg 2>&1 || true
fi
